# ```python
# Import all required packages
import pandas as pd
import numpy as np
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import MinMaxScaler, OneHotEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, f1_score
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer

# Load the training and test datasets
train_data = pd.read_csv('../../../data/Albert/Albert_train.csv')
test_data = pd.read_csv('../../../data/Albert/Albert_test.csv')

# Define columns for preprocessing
num_cols = ['V5','V37','V58','V44','V17','V34','V16','V25','V55','V39','V29','V57']
cat_cols = ['V51','V6','V8','V72','V53','V52','V71','V35','V38','V1','V42','V3','V64','V11','V43','V33','V32','V13','V47','V69','V75','V41','V67','V9','V19','V12','V70','V7','V40','V4','V59','V10','V50']

# Define preprocessing pipelines
num_pipeline = Pipeline([
    ('imputer', SimpleImputer(strategy='median')),
    ('scaler', MinMaxScaler())
])

cat_pipeline = Pipeline([
    ('imputer', SimpleImputer(strategy='most_frequent')),
    ('encoder', OneHotEncoder())
])

preprocessor = ColumnTransformer(
    transformers=[
        ('num', num_pipeline, num_cols),
        ('cat', cat_pipeline, cat_cols)
    ])

# Define the classifier
clf = RandomForestClassifier(max_leaf_nodes=500)

# Combine preprocessing and classification into a pipeline
model = Pipeline(steps=[('preprocessor', preprocessor),
                        ('classifier', clf)])

# Train the model
X_train = train_data.drop('class', axis=1)
y_train = train_data['class']
model.fit(X_train, y_train)

# Evaluate the model
X_test = test_data.drop('class', axis=1)
y_test = test_data['class']

y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)

Train_Accuracy = accuracy_score(y_train, y_train_pred)
Test_Accuracy = accuracy_score(y_test, y_test_pred)

Train_F1_score = f1_score(y_train, y_train_pred)
Test_F1_score = f1_score(y_test, y_test_pred)

print(f"Train_Accuracy:{Train_Accuracy}")
print(f"Train_F1_score:{Train_F1_score}")
print(f"Test_Accuracy:{Test_Accuracy}")
print(f"Test_F1_score:{Test_F1_score}")
# ```