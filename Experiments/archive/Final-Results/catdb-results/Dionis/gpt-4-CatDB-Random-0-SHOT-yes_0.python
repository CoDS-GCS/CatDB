# ```python
# Import all required packages
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import r2_score, mean_squared_error
from math import sqrt
# ```end

# ```python
# Load the training and test datasets
train_data = pd.read_csv('../../../data/Dionis/Dionis_train.csv')
test_data = pd.read_csv('../../../data/Dionis/Dionis_test.csv')
# ```end

# ```python
# Perform data cleaning and preprocessing
# Drop the unnecessary columns
drop_columns = ['V27','V37','V54','V35','V33','V14']
train_data.drop(columns=drop_columns, inplace=True)
test_data.drop(columns=drop_columns, inplace=True)
# ```end

# ```python
# Perform feature processing
# Define the columns to be scaled and encoded
scale_columns = ['V15','V13','V30','V32','V11','V38','V8','V40','V28','V34','V2','V22','V9','V59','V17','V48','V50','V19','V57','V58','V24','V1','V55','V41','V31','V44','V56','V20','V39','V23','V52','V29','V5','V46','V42','V16','V43','V18','V7','V4','V36','V12','V51','V47']
encode_columns = ['V21','V26','V6','V10','V45','V60','V53','V3','V49','V25']

# Define the transformer for scaling and encoding
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), scale_columns),
        ('cat', OneHotEncoder(), encode_columns)])

# Fit and transform the train and test data
train_data = preprocessor.fit_transform(train_data)
test_data = preprocessor.transform(test_data)
# ```end

# ```python
# Select the appropriate features and target variables
X_train = train_data.drop('class', axis=1)
y_train = train_data['class']
X_test = test_data.drop('class', axis=1)
y_test = test_data['class']
# ```end

# ```python
# Choose the suitable machine learning algorithm or technique (regressor)
# RandomForestClassifier is selected because it can handle both numerical and categorical data, and it's also robust to outliers.
clf = RandomForestClassifier(max_leaf_nodes=500)
clf.fit(X_train, y_train)
# ```end

# ```python
# Report evaluation based on train and test dataset
y_train_pred = clf.predict(X_train)
y_test_pred = clf.predict(X_test)

Train_R_Squared = r2_score(y_train, y_train_pred)
Train_RMSE = sqrt(mean_squared_error(y_train, y_train_pred))
Test_R_Squared = r2_score(y_test, y_test_pred)
Test_RMSE = sqrt(mean_squared_error(y_test, y_test_pred))

print(f"Train_R_Squared:{Train_R_Squared}")   
print(f"Train_RMSE:{Train_RMSE}") 
print(f"Test_R_Squared:{Test_R_Squared}")   
print(f"Test_RMSE:{Test_RMSE}") 
# ```end