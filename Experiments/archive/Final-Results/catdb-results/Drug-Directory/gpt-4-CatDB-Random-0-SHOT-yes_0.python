# ```python
# Import all required packages
import pandas as pd
import numpy as np
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, log_loss
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split
# ```end

# ```python
# Load the training and test datasets
train_data = pd.read_csv('../../../data/Drug-Directory/Drug-Directory_train.csv')
test_data = pd.read_csv('../../../data/Drug-Directory/Drug-Directory_test.csv')
# ```end

# ```python-dropping-columns
# Drop the columns that are not needed for the analysis
columns_to_drop = ['ENDMARKETINGDATE', 'NDC_EXCLUDE_FLAG', 'PROPRIETARYNAMESUFFIX', 'DEASCHEDULE']
train_data.drop(columns=columns_to_drop, inplace=True)
test_data.drop(columns=columns_to_drop, inplace=True)
# ```end-dropping-columns

# ```python
# Define the columns that need to be imputed and scaled
num_cols = ['STARTMARKETINGDATE', 'LISTING_RECORD_CERTIFIED_THROUGH']
cat_cols = ['SUBSTANCENAME', 'APPLICATIONNUMBER', 'NONPROPRIETARYNAME', 'PROPRIETARYNAME', 'PHARM_CLASSES', 'ACTIVE_INGRED_UNIT', 'LISTING_RECORD_CERTIFIED_THROUGH', 'ROUTENAME', 'ACTIVE_NUMERATOR_STRENGTH']
# ```end

# ```python
# Define the preprocessing steps for the numerical and categorical columns
num_preprocessing = Pipeline([
    ('imputer', SimpleImputer(strategy='median')),
    ('scaler', StandardScaler())
])

cat_preprocessing = Pipeline([
    ('imputer', SimpleImputer(strategy='most_frequent')),
    ('encoder', OneHotEncoder(handle_unknown='ignore'))
])

# Combine the preprocessing steps
preprocessing = ColumnTransformer([
    ('num', num_preprocessing, num_cols),
    ('cat', cat_preprocessing, cat_cols)
])
# ```end

# ```python
# Define the target variable and the features
X_train = train_data.drop('PRODUCTTYPENAME', axis=1)
y_train = train_data['PRODUCTTYPENAME']
X_test = test_data.drop('PRODUCTTYPENAME', axis=1)
y_test = test_data['PRODUCTTYPENAME']
# ```end

# ```python 
# Choose the RandomForestClassifier as the machine learning algorithm
# RandomForestClassifier is chosen because it can handle both numerical and categorical data, and it is also robust to outliers.
# It also has the advantage of being able to handle multiclass classification problems.
model = RandomForestClassifier(max_leaf_nodes=500)

# Combine the preprocessing steps and the model into a pipeline
pipeline = Pipeline([
    ('preprocessing', preprocessing),
    ('model', model)
])
# ```end

# ```python
# Train the model
pipeline.fit(X_train, y_train)
# ```end

# ```python
# Make predictions on the train and test datasets
y_train_pred = pipeline.predict(X_train)
y_test_pred = pipeline.predict(X_test)

# Calculate the accuracy and log loss for the train and test datasets
Train_Accuracy = accuracy_score(y_train, y_train_pred)
Test_Accuracy = accuracy_score(y_test, y_test_pred)
Train_Log_loss = log_loss(y_train, y_train_pred)
Test_Log_loss = log_loss(y_test, y_test_pred)

# Print the results
print(f"Train_Accuracy:{Train_Accuracy}")   
print(f"Train_Log_loss:{Train_Log_loss}") 
print(f"Test_Accuracy:{Test_Accuracy}")   
print(f"Test_Log_loss:{Test_Log_loss}")
# ```end