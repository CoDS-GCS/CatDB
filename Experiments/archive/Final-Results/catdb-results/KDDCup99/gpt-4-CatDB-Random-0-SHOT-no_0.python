# ```python
# Import all required packages
import pandas as pd
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, log_loss
from sklearn.pipeline import Pipeline
# ```end

# ```python
# Load the training and test datasets
train_data = pd.read_csv('../../../data/KDDCup99/KDDCup99_train.csv')
test_data = pd.read_csv('../../../data/KDDCup99/KDDCup99_test.csv')
# ```end

# ```python
# Drop the column 'lnum_outbound_cmds' as it is not useful for the model
train_data.drop(columns=['lnum_outbound_cmds'], inplace=True)
test_data.drop(columns=['lnum_outbound_cmds'], inplace=True)
# ```end

# ```python
# Define preprocessor
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), ['lnum_shells','num_failed_logins','dst_host_count','src_bytes','dst_bytes','lnum_root','duration','urgent','count','dst_host_srv_count','lnum_access_files','lnum_compromised','srv_count','lnum_file_creations','hot','wrong_fragment','lsu_attempted','dst_host_same_srv_rate','srv_rerror_rate','dst_host_srv_serror_rate','serror_rate','dst_host_diff_srv_rate','dst_host_srv_diff_host_rate','rerror_rate','dst_host_serror_rate','srv_diff_host_rate','dst_host_same_src_port_rate','dst_host_srv_rerror_rate','diff_srv_rate','dst_host_rerror_rate','same_srv_rate','srv_serror_rate']),
        ('cat', OneHotEncoder(), ['service','flag','protocol_type','lroot_shell','is_host_login','is_guest_login','land','logged_in'])
    ])
# ```end

# ```python
# Define the classifier
clf = RandomForestClassifier(max_leaf_nodes=500)
# ```end

# ```python
# Combine preprocessing and classifier into a pipeline
pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                           ('classifier', clf)])
# ```end

# ```python
# Define features and target variables
X_train = train_data.drop('label', axis=1)
y_train = train_data['label']
X_test = test_data.drop('label', axis=1)
y_test = test_data['label']
# ```end

# ```python
# Train the model
pipeline.fit(X_train, y_train)
# ```end

# ```python
# Predict the labels and calculate accuracy and log loss for train dataset
y_train_pred = pipeline.predict(X_train)
Train_Accuracy = accuracy_score(y_train, y_train_pred)
Train_Log_loss = log_loss(y_train, y_train_pred)
# ```end

# ```python
# Predict the labels and calculate accuracy and log loss for test dataset
y_test_pred = pipeline.predict(X_test)
Test_Accuracy = accuracy_score(y_test, y_test_pred)
Test_Log_loss = log_loss(y_test, y_test_pred)
# ```end

# ```python
# Print the train accuracy result
print(f"Train_Accuracy:{Train_Accuracy}")   
# ```end

# ```python
# Print the train log loss result
print(f"Train_Log_loss:{Train_Log_loss}") 
# ```end

# ```python
# Print the test accuracy result
print(f"Test_Accuracy:{Test_Accuracy}")   
# ```end

# ```python
# Print the test log loss result
print(f"Test_Log_loss:{Test_Log_loss}")
# ```end