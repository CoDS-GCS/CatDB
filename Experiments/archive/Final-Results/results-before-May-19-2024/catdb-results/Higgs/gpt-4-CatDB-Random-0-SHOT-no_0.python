# ```python
# Import all required packages
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, f1_score
from sklearn.model_selection import train_test_split
# ```end

# ```python
# Load the training and test datasets
train_data = pd.read_csv('../../../data/Higgs/Higgs_train.csv')
test_data = pd.read_csv('../../../data/Higgs/Higgs_test.csv')
# ```end

# ```python
# Perform data cleaning and preprocessing
# As per the schema and data profiling info, there are no missing values and all the columns are of correct data type. So, no cleaning is required.
# ```end

# ```python
# Perform data augmentation techniques
# As per the schema and data profiling info, all the features are numerical and there are no categorical features. So, no data augmentation is required.
# ```end

# ```python
# Perform feature processing
# Select numerical columns for scaling
num_cols = ['m_bb', 'jet 2 eta', 'jet 4 pt', 'jet 4 phi', 'jet 3 b-tag', 'jet 3 phi', 'jet 1 b-tag', 'jet 3 eta', 'missing energy magnitude', 'jet 3 pt', 'lepton eta', 'm_wbb', 'jet 1 phi', 'jet 4 eta', 'lepton pT', 'jet 1 pt', 'm_jj', 'm_wwbb', 'missing energy phi', 'm_jlv', 'jet 2 b-tag', 'm_jjj', 'jet 4 b-tag', 'm_lv', 'lepton phi', 'jet 2 phi', 'jet 2 pt', 'jet 1 eta']

# Select categorical columns for one-hot encoding
cat_cols = ['jet 2 eta', 'jet 4 pt', 'jet 4 phi', 'jet 3 b-tag', 'jet 3 phi', 'jet 1 b-tag', 'jet 3 eta', 'jet 3 pt', 'lepton eta', 'jet 1 phi', 'jet 4 eta', 'lepton pT', 'jet 1 pt', 'jet 2 b-tag', 'jet 4 b-tag', 'lepton phi', 'jet 2 phi', 'jet 2 pt', 'jet 1 eta']

# Define preprocessor
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), num_cols),
        ('cat', OneHotEncoder(), cat_cols)])

# Define pipeline
pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                           ('classifier', RandomForestClassifier(max_leaf_nodes=500))])
# ```end

# ```python
# Select the appropriate features and target variables for the question
X_train = train_data.drop('Target', axis=1)
y_train = train_data['Target']
X_test = test_data.drop('Target', axis=1)
y_test = test_data['Target']
# ```end

# ```python
# Train the model
pipeline.fit(X_train, y_train)
# ```end

# ```python
# Predict the target variable
y_train_pred = pipeline.predict(X_train)
y_test_pred = pipeline.predict(X_test)
# ```end

# ```python
# Report evaluation based on train and test dataset
Train_Accuracy = accuracy_score(y_train, y_train_pred)
Test_Accuracy = accuracy_score(y_test, y_test_pred)
Train_F1_score = f1_score(y_train, y_train_pred)
Test_F1_score = f1_score(y_test, y_test_pred)

print(f"Train_Accuracy:{Train_Accuracy}")
print(f"Train_F1_score:{Train_F1_score}")
print(f"Test_Accuracy:{Test_Accuracy}")
print(f"Test_F1_score:{Test_F1_score}")
# ```end