# ```python
# Import all required packages
import pandas as pd
import numpy as np
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import r2_score, mean_squared_error
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split
# ```end

# ```python
# Load the training and test datasets
train_data = pd.read_csv('../../../data/MD-MIX-Mini/MD-MIX-Mini_train.csv')
test_data = pd.read_csv('../../../data/MD-MIX-Mini/MD-MIX-Mini_test.csv')
# ```end

# ```python
# Perform data cleaning and preprocessing
# Drop unnecessary columns
drop_cols = ['font_weight','image_width_resolution','morph_gradient_kernel_size','image_height_resolution','font_size','background_random_color_composition_params','image_mode','morph_gradient_kernel_shape','background_polygon_outline_color','background_polygon_fill_color','margin_right','margin_bottom','margin_left','margin_top','pre_elastic']
train_data.drop(columns=drop_cols, inplace=True)
test_data.drop(columns=drop_cols, inplace=True)

# Impute missing values for numerical columns
num_cols = ['foreground_image_crop_x_plus_width','outline_image_crop_y','foreground_image_crop_x','foreground_image_crop_y_plus_height','background_image_crop_y','background_image_crop_x','outline_image_crop_x','background_image_crop_x_plus_width','background_image_crop_y_plus_height','outline_image_crop_x_plus_width','foreground_image_crop_y','outline_image_crop_y_plus_height','shear_x']
imputer = SimpleImputer(strategy='mean')
train_data[num_cols] = imputer.fit_transform(train_data[num_cols])
test_data[num_cols] = imputer.transform(test_data[num_cols])

# Impute missing values for categorical columns
cat_cols = ['background_image_name','outline_image_name','foreground_image_name','outline','outline_size','background_image_original_height','foreground_image_resized_width','background_image_resized_height','foreground_image_original_width','background_image_original_width','foreground_image_original_height','outline_image_original_width','foreground_image_resized_height','background_image_resized_width','outline_image_resized_height','outline_image_original_height','outline_image_resized_width','background_color','stroke_fill','shear_y']
imputer = SimpleImputer(strategy='most_frequent')
train_data[cat_cols] = imputer.fit_transform(train_data[cat_cols])
test_data[cat_cols] = imputer.transform(test_data[cat_cols])
# ```end

# ```python
# Perform feature processing
# One-hot encode categorical columns
encoder = OneHotEncoder(drop='first')
train_data = pd.concat([train_data, pd.DataFrame(encoder.fit_transform(train_data[cat_cols]).toarray())], axis=1)
test_data = pd.concat([test_data, pd.DataFrame(encoder.transform(test_data[cat_cols]).toarray())], axis=1)

# Scale numerical columns
scaler = StandardScaler()
train_data[num_cols] = scaler.fit_transform(train_data[num_cols])
test_data[num_cols] = scaler.transform(test_data[num_cols])
# ```end

# ```python
# Select the appropriate features and target variables
X_train = train_data.drop(columns='CATEGORY')
y_train = train_data['CATEGORY']
X_test = test_data.drop(columns='CATEGORY')
y_test = test_data['CATEGORY']
# ```end

# ```python
# Choose the suitable machine learning algorithm or technique (regressor)
# RandomForestClassifier is selected because it is a versatile and widely used algorithm that can handle both categorical and numerical features, and it also has parameters to prevent overfitting.
clf = RandomForestClassifier(max_leaf_nodes=500)
clf.fit(X_train, y_train)
# ```end

# ```python
# Report evaluation based on train and test dataset
y_train_pred = clf.predict(X_train)
y_test_pred = clf.predict(X_test)

Train_R_Squared = r2_score(y_train, y_train_pred)
Train_RMSE = np.sqrt(mean_squared_error(y_train, y_train_pred))
Test_R_Squared = r2_score(y_test, y_test_pred)
Test_RMSE = np.sqrt(mean_squared_error(y_test, y_test_pred))

print(f"Train_R_Squared:{Train_R_Squared}")   
print(f"Train_RMSE:{Train_RMSE}") 
print(f"Test_R_Squared:{Test_R_Squared}")   
print(f"Test_RMSE:{Test_RMSE}") 
# ```end