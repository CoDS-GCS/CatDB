# ```python
# Import all required packages
import pandas as pd
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, f1_score
# ```end

# ```python
# Load the training and test datasets
train_data = pd.read_csv('../../../data/Tic-Tac-Toe/Tic-Tac-Toe_train.csv')
test_data = pd.read_csv('../../../data/Tic-Tac-Toe/Tic-Tac-Toe_test.csv')
# ```end

# ```python
# Perform data cleaning and preprocessing
# As per the given schema and data profiling info, there is no missing data or outliers. So, no data cleaning is required.
# However, we need to convert the 'Class' column to binary format
train_data['Class'] = train_data['Class'].map({'positive': 1, 'negative': 0})
test_data['Class'] = test_data['Class'].map({'positive': 1, 'negative': 0})
# ```end

# ```python
# Perform feature processing
# As per the given schema and data profiling info, all the features are categorical. So, we need to encode them.
# We will use OneHotEncoder for this purpose.
categorical_features = ['top-middle-square', 'middle-right-square', 'middle-left-square', 'bottom-right-square', 'bottom-left-square', 'middle-middle-square', 'bottom-middle-square', 'top-left-square', 'top-right-square']
categorical_transformer = OneHotEncoder(drop='first')

preprocessor = ColumnTransformer(
    transformers=[
        ('cat', categorical_transformer, categorical_features)])

# Append classifier to preprocessing pipeline.
# Now we have a full prediction pipeline.
clf = Pipeline(steps=[('preprocessor', preprocessor),
                      ('classifier', RandomForestClassifier(max_leaf_nodes=500))])
# ```end

# ```python
# Select the appropriate features and target variables for the question
X_train = train_data.drop('Class', axis=1)
y_train = train_data['Class']

X_test = test_data.drop('Class', axis=1)
y_test = test_data['Class']
# ```end

# ```python
# Train the model
clf.fit(X_train, y_train)
# ```end

# ```python
# Predict the target variable for train and test datasets
y_train_pred = clf.predict(X_train)
y_test_pred = clf.predict(X_test)
# ```end

# ```python
# Report evaluation based on train and test dataset
Train_Accuracy = accuracy_score(y_train, y_train_pred)
Test_Accuracy = accuracy_score(y_test, y_test_pred)

Train_F1_score = f1_score(y_train, y_train_pred)
Test_F1_score = f1_score(y_test, y_test_pred)

print(f"Train_Accuracy:{Train_Accuracy}")
print(f"Train_F1_score:{Train_F1_score}")
print(f"Test_Accuracy:{Test_Accuracy}")
print(f"Test_F1_score:{Test_F1_score}")
# ```end