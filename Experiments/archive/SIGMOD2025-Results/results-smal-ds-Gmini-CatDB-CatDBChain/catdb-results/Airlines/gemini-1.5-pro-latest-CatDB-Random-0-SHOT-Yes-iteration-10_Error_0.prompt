SYSTEM MESSAGE:
Task: You are expert in coding assistant. Your task is fix the error of this pipeline code.### Input: The user will provide a pipeline code enclosed in "<CODE> pipline code will be here. </CODE>", and an error message enclosed in "<ERROR> error message will be here. </ERROR>".### Rule : Each codeblock ends with "```end" and starts with "```python".
---------------------------------------
PROMPT TEXT:
###  Schema, and Data Profiling Info:
"""
# DayOfWeek (int), categorical-values [2,3,0,6,5,4,1]
# AirportTo (int), distinct-count [190], min-value [0.0], max-value [284.0], median-value [25.0], mean-value [43.102]
# Airline (int), categorical-values [0,2,14,7,5,17,4,15,11,1,10,12,13,16,3,9,8,6]
# AirportFrom (int), distinct-count [187], min-value [0.0], max-value [282.0], median-value [65.0], mean-value [76.21]
# Flight (int), distinct-count [1611], min-value [1.0], max-value [7801.0], median-value [1859.5], mean-value [2457.833]
# Length (int), distinct-count [288], min-value [26.0], max-value [420.0], median-value [116.0], mean-value [131.197]
# Time (int), distinct-count [520], min-value [15.0], max-value [1431.0], median-value [786.0], mean-value [795.0555]
# Delay (bool, **This is a target column**), categorical-values [1,0]
"""


### <CODE>
# ```python
import pandas as pd
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, f1_score, roc_auc_score

train_data = pd.read_csv("../../../data/Airlines/Airlines_train.csv")
test_data = pd.read_csv("../../../data/Airlines/Airlines_test.csv")



encoder = OneHotEncoder(handle_unknown='ignore')
encoder.fit(pd.concat([train_data[['DayOfWeek', 'Airline']], test_data[['DayOfWeek', 'Airline']]]))

train_encoded = encoder.transform(train_data[['DayOfWeek', 'Airline']]).toarray()
test_encoded = encoder.transform(test_data[['DayOfWeek', 'Airline']]).toarray()

encoded_columns = encoder.get_feature_names_out(['DayOfWeek', 'Airline'])

train_data = pd.concat([train_data, pd.DataFrame(train_encoded, columns=encoded_columns)], axis=1)
test_data = pd.concat([test_data, pd.DataFrame(test_encoded, columns=encoded_columns)], axis=1)

train_data['AirportFrom_To_Ratio'] = train_data['AirportFrom'] / train_data['AirportTo']
test_data['AirportFrom_To_Ratio'] = test_data['AirportFrom'] / test_data['AirportTo']

def categorize_flight_duration(length):
    if length <= 100:
        return 'Short'
    elif length <= 250:
        return 'Medium'
    else:
        return 'Long'

train_data['Flight_Duration_Category'] = train_data['Length'].apply(categorize_flight_duration)
test_data['Flight_Duration_Category'] = test_data['Length'].apply(categorize_flight_duration)

train_data = pd.get_dummies(train_data, columns=['Flight_Duration_Category'])
test_data = pd.get_dummies(test_data, columns=['Flight_Duration_Category'])

train_data.drop(columns=['AirportFrom', 'AirportTo'], inplace=True)
test_data.drop(columns=['AirportFrom', 'AirportTo'], inplace=True)

X_train = train_data.drop(columns=['Delay'])
y_train = train_data['Delay']
X_test = test_data.drop(columns=['Delay'])
y_test = test_data['Delay']

trn = RandomForestClassifier(max_leaf_nodes=500, random_state=42)
trn.fit(X_train, y_train)

y_pred_train = trn.predict(X_train)
y_pred_test = trn.predict(X_test)

Train_Accuracy = accuracy_score(y_train, y_pred_train)
Test_Accuracy = accuracy_score(y_test, y_pred_test)

Train_F1_score = f1_score(y_train, y_pred_train)
Test_F1_score = f1_score(y_test, y_pred_test)

Train_AUC = roc_auc_score(y_train, y_pred_train)
Test_AUC = roc_auc_score(y_test, y_pred_test)

print(f"Train_AUC:{Train_AUC}")
print(f"Train_Accuracy:{Train_Accuracy}")   
print(f"Train_F1_score:{Train_F1_score}")
print(f"Test_AUC:{Test_AUC}")
print(f"Test_Accuracy:{Test_Accuracy}")   
print(f"Test_F1_score:{Test_F1_score}") 
# ```end
</CODE>

### <ERROR>
ValueError: Input X contains infinity or a value too large for dtype('float32').
</ERROR>

### Question: Fix the code error provided and return only the corrected pipeline without additional explanations regarding the resolved error.