SYSTEM MESSAGE:
Task: You are expert in coding assistant. Your task is fix the error of this pipeline code.### Input: The user will provide a pipeline code enclosed in "<CODE> pipline code will be here. </CODE>", and an error message enclosed in "<ERROR> error message will be here. </ERROR>".### Rule : Each codeblock ends with "```end" and starts with "```python".
---------------------------------------
PROMPT TEXT:
###  Schema, and Data Profiling Info:
"""
# DayOfWeek (int), categorical-values [2,3,0,6,5,4,1]
# AirportTo (int), distinct-count [190]
# Airline (int), categorical-values [0,2,14,7,5,17,4,15,11,1,10,12,13,16,3,9,8,6]
# AirportFrom (int), distinct-count [187]
# Flight (int), distinct-count [1611]
# Length (int), distinct-count [288]
# Time (int), distinct-count [520]
# Delay (bool, **This is a target column**), categorical-values [1,0]
"""


### <CODE>
# ```python
import pandas as pd
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, f1_score, roc_auc_score

categorical_features = ["DayOfWeek", "Airline"]
numerical_features = ["AirportTo", "AirportFrom", "Flight", "Length", "Time"]

train_data = pd.read_csv("../../../data/Airlines/Airlines_train.csv")
test_data = pd.read_csv("../../../data/Airlines/Airlines_test.csv")

preprocessor = ColumnTransformer(
    transformers=[
        ("num", "passthrough", numerical_features),
        ("cat", OneHotEncoder(handle_unknown="ignore"), categorical_features),
    ]
)

pipeline = Pipeline(
    steps=[
        ("preprocessor", preprocessor),
        ("classifier", RandomForestClassifier(max_leaf_nodes=500, n_jobs=-1)),
    ]
)
X_train = pipeline.fit_transform(train_data.drop("Delay", axis=1))
y_train = train_data["Delay"]
X_test = pipeline.transform(test_data.drop("Delay", axis=1))
y_test = test_data["Delay"]

y_train_pred = pipeline.predict(X_train)
y_test_pred = pipeline.predict(X_test)

Train_Accuracy = accuracy_score(y_train, y_train_pred)
Train_F1_score = f1_score(y_train, y_train_pred)
Train_AUC = roc_auc_score(y_train, y_train_pred)

Test_Accuracy = accuracy_score(y_test, y_test_pred)
Test_F1_score = f1_score(y_test, y_test_pred)
Test_AUC = roc_auc_score(y_test, y_test_pred)

print(f"Train_AUC:{Train_AUC}")
print(f"Train_Accuracy:{Train_Accuracy}")   
print(f"Train_F1_score:{Train_F1_score}")
print(f"Test_AUC:{Test_AUC}")
print(f"Test_Accuracy:{Test_Accuracy}")   
print(f"Test_F1_score:{Test_F1_score}") 
# ```end
</CODE>

### <ERROR>
AttributeError: This 'Pipeline' has no attribute 'fit_transform'
</ERROR>

### Question: Fix the code error provided and return only the corrected pipeline without additional explanations regarding the resolved error.