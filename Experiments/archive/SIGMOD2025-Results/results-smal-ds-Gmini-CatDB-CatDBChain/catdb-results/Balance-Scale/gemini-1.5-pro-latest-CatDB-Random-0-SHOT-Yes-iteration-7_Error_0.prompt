SYSTEM MESSAGE:
Task: You are expert in coding assistant. Your task is fix the error of this pipeline code.### Input: The user will provide a pipeline code enclosed in "<CODE> pipline code will be here. </CODE>", and an error message enclosed in "<ERROR> error message will be here. </ERROR>".### Rule : Each codeblock ends with "```end" and starts with "```python".
---------------------------------------
PROMPT TEXT:
###  Schema, and Data Profiling Info:
"""
# right-weight (int), categorical-values [4,5,3,1,2]
# right-distance (int), categorical-values [5,4,3,1,2]
# left-weight (int), categorical-values [3,5,1,4,2]
# left-distance (int), categorical-values [1,2,3,4,5]
# class (int, **This is a target column**), categorical-values [2,0,1]
"""


### <CODE>
# ```python
import pandas as pd
from sklearn.preprocessing import OneHotEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, log_loss
from sklearn.multiclass import OneVsOneClassifier
from sklearn.multiclass import OneVsRestClassifier
from sklearn.metrics import roc_auc_score

train_data = pd.read_csv("../../../data/Balance-Scale/Balance-Scale_train.csv")
test_data = pd.read_csv("../../../data/Balance-Scale/Balance-Scale_test.csv")



encoder = OneHotEncoder(handle_unknown='ignore')
encoded_train = pd.DataFrame(encoder.fit_transform(train_data[['right-weight', 'right-distance', 'left-weight', 'left-distance']]).toarray())
encoded_test = pd.DataFrame(encoder.transform(test_data[['right-weight', 'right-distance', 'left-weight', 'left-distance']]).toarray())

train_data = train_data.reset_index(drop=True).join(encoded_train.reset_index(drop=True))
test_data = test_data.reset_index(drop=True).join(encoded_test.reset_index(drop=True))

# ```python
train_data['total_weight'] = train_data['left-weight'] + train_data['right-weight']
test_data['total_weight'] = test_data['left-weight'] + test_data['right-weight']
# ```end
# ```python
train_data['weight_difference'] = (train_data['right-weight'] - train_data['left-weight']).abs()
test_data['weight_difference'] = (test_data['right-weight'] - test_data['left-weight']).abs()
# ```end
# ```python
train_data['total_distance'] = train_data['left-distance'] + train_data['right-distance']
test_data['total_distance'] = test_data['left-distance'] + test_data['right-distance']
# ```end
# ```python
train_data['distance_difference'] = (train_data['right-distance'] - train_data['left-distance']).abs()
test_data['distance_difference'] = (test_data['right-distance'] - test_data['left-distance']).abs()
# ```end
# ```python
train_data['moment_difference'] = (train_data['right-weight'] * train_data['right-distance']) - (train_data['left-weight'] * train_data['left-distance'])
test_data['moment_difference'] = (test_data['right-weight'] * test_data['right-distance']) - (test_data['left-weight'] * test_data['left-distance'])
# ```end

# ```python-dropping-columns
train_data.drop(columns=['right-weight'], inplace=True)
test_data.drop(columns=['right-weight'], inplace=True)
# ```end-dropping-columns
# ```python-dropping-columns
train_data.drop(columns=['right-distance'], inplace=True)
test_data.drop(columns=['right-distance'], inplace=True)
# ```end-dropping-columns
# ```python-dropping-columns
train_data.drop(columns=['left-weight'], inplace=True)
test_data.drop(columns=['left-weight'], inplace=True)
# ```end-dropping-columns
# ```python-dropping-columns
train_data.drop(columns=['left-distance'], inplace=True)
test_data.drop(columns=['left-distance'], inplace=True)
# ```end-dropping-columns

X_train = train_data.drop('class', axis=1)
y_train = train_data['class']
X_test = test_data.drop('class', axis=1)
y_test = test_data['class']

trn = RandomForestClassifier(max_leaf_nodes=500, random_state=42)

trn.fit(X_train, y_train)

y_pred_train = trn.predict(X_train)
y_pred_proba_train = trn.predict_proba(X_train)
y_pred_test = trn.predict(X_test)
y_pred_proba_test = trn.predict_proba(X_test)

# ```python
Train_Accuracy = accuracy_score(y_train, y_pred_train)
Test_Accuracy = accuracy_score(y_test, y_pred_test)
Train_Log_loss = log_loss(y_train, y_pred_proba_train)
Test_Log_loss = log_loss(y_test, y_pred_proba_test)
ovo_clf = OneVsOneClassifier(trn)
ovo_clf.fit(X_train, y_train)
y_pred_ovo_train = ovo_clf.predict(X_train)
y_pred_ovo_test = ovo_clf.predict(X_test)
Train_AUC_OVO = roc_auc_score(y_train, y_pred_ovo_train, multi_class='ovo', average='macro')
Test_AUC_OVO = roc_auc_score(y_test, y_pred_ovo_test, multi_class='ovo', average='macro')
ovr_clf = OneVsRestClassifier(trn)
ovr_clf.fit(X_train, y_train)
y_pred_ovr_train = ovr_clf.predict(X_train)
y_pred_ovr_test = ovr_clf.predict(X_test)
Train_AUC_OVR = roc_auc_score(y_train, y_pred_ovr_train, multi_class='ovr', average='macro')
Test_AUC_OVR = roc_auc_score(y_test, y_pred_ovr_test, multi_class='ovr', average='macro')
print(f"Train_AUC_OVO:{Train_AUC_OVO}")
print(f"Train_AUC_OVR:{Train_AUC_OVR}")
print(f"Train_Accuracy:{Train_Accuracy}")   
print(f"Train_Log_loss:{Train_Log_loss}") 
print(f"Test_AUC_OVO:{Test_AUC_OVO}")
print(f"Test_AUC_OVR:{Test_AUC_OVR}")
print(f"Test_Accuracy:{Test_Accuracy}")   
print(f"Test_Log_loss:{Test_Log_loss}")
# ```end
</CODE>

### <ERROR>
TypeError: Feature names are only supported if all input features have string names, but your input has ['int', 'str'] as feature name / column name types. If you want feature names to be stored and validated, you must convert them all to strings, by using X.columns = X.columns.astype(str) for example. Otherwise you can remove feature / column names from your input data, or convert them all to a non-string data type.
</ERROR>

### Question: Fix the code error provided and return only the corrected pipeline without additional explanations regarding the resolved error.