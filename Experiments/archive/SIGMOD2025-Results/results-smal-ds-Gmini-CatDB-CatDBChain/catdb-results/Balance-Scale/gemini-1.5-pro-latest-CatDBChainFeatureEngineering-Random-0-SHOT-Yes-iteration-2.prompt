SYSTEM MESSAGE:
###  Task: Select the appropriate features and target variables for the question (Feature Engineering Task). Additional columns add new semantic information, additional columns that are useful for a downstream algorithmpredicting "class". They can e.g. be feature combinations, transformations, aggregations where the new column is a function of the existing columns. Use appropriate scale factor for columns are needto transfer.
###  Input: first draft version of pipline with a Data Preprocessing task enclosed in "<CODE> pipline code will be here. </CODE>", and a schema that describes the columns and data types of the dataset, and a data profiling info that summarizes the statistics and quality of the dataset.
###  Output: A modified Python 3.10 code with additional feature enginnering tasks that performs the following steps:
#1 : The target feature in the dataset is "class".
#2 : Perform drops columns, if these may be redundant and hurt the predictive performance of the downstream classifier (Feature selection). Dropping columns may help as the chance of overfitting is lower, especially if the dataset is small. The class will be trained on the dataset with the generated columns and evaluated on a holdout set.
#3 : If the question is not relevant to the dataset or the task, the output should be: "Insufficient information."
#4 : Don't display the first few rows of the datasets.
#5 : Each codeblock ends with "```end" and starts with "```python".
#6 : Don't use "if __name__ == '__main__':" style, use only flat mode.
---------------------------------------
PROMPT TEXT:
###  Description of the dataset:

**Balance Scale Weight & Distance Database**  
This data set was generated to model psychological experimental results.  Each example is classified as having the balance scale tip to the right, tip to the left, or be balanced. The attributes are the left weight, the left distance, the right weight, and the right distance. The correct way to find the class is the greater of (left-distance * left-weight) and (right-distance * right-weight). If they are equal, it is balanced.



 Attribute description  
The attributes are the left weight, the left distance, the right weight, and the right distance.



 Relevant papers  
Shultz, T., Mareschal, D., & Schmidt, W. (1994). Modeling Cognitive Development on Balance Scale Phenomena. Machine Learning, Vol. 16, pp. 59-88.


### <CODE>
# ```python
import pandas as pd
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
import multiprocessing

train_data = pd.read_csv("../../../data/Balance-Scale/Balance-Scale_train.csv")
test_data = pd.read_csv("../../../data/Balance-Scale/Balance-Scale_test.csv")

categorical_features = ['right-weight', 'right-distance', 'left-weight', 'left-distance', 'class']

encoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False)

preprocessor = ColumnTransformer(
    transformers=[
        ('cat', encoder, categorical_features)
    ],
    remainder='passthrough'
)

def process_data(data):
    """Applies data preprocessing to a given dataset."""
    X = data.drop('class', axis=1)
    y = data['class']
    X_encoded = preprocessor.fit_transform(X)
    return X_encoded, y

if __name__ == '__main__':
    num_processes = multiprocessing.cpu_count()
    pool = multiprocessing.Pool(processes=num_processes)

    train_results = pool.apply_async(process_data, (train_data,))
    test_results = pool.apply_async(process_data, (test_data,))

    X_train, y_train = train_results.get()
    X_test, y_test = test_results.get()

    pool.close()
    pool.join()
# ```end
</CODE>

### Schema, and Data Profiling Info:
"""
# right-weight (int), categorical-values [4,5,3,1,2]
# right-distance (int), categorical-values [5,4,3,1,2]
# left-weight (int), categorical-values [3,5,1,4,2]
# left-distance (int), categorical-values [1,2,3,4,5]
# class (int, **This is a target column**), categorical-values [2,0,1]
"""

### Encode categorical values by "on-hot-encoder" for the following columns:
	# Columns: right-weight,right-distance,left-weight,left-distance,class

### Dataset Attribute:
# Number of samples (rows) in training dataset: 625

### Question: Provide a pipeline code that modify the Data Preprocessing code by adding Feature Engineering tasks in a multi-threaded environment.