# ```python
import pandas as pd
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, f1_score, roc_auc_score

train_data = pd.read_csv("../../../data/Breast-w/Breast-w_train.csv")
test_data = pd.read_csv("../../../data/Breast-w/Breast-w_test.csv")


from imblearn.over_sampling import SMOTE
smote = SMOTE(random_state=42)
X_train = train_data.drop('Class', axis=1)
y_train = train_data['Class']
X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)
train_data = pd.concat([X_train_resampled, y_train_resampled], axis=1)

categorical_cols = ['Normal_Nucleoli', 'Bland_Chromatin', 'Clump_Thickness', 'Cell_Shape_Uniformity', 'Bare_Nuclei',
                   'Cell_Size_Uniformity', 'Marginal_Adhesion', 'Mitoses', 'Single_Epi_Cell_Size']
encoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False)

encoder.fit(pd.concat([train_data[categorical_cols], test_data[categorical_cols]]))

encoded_features = encoder.transform(train_data[categorical_cols])
encoded_df = pd.DataFrame(encoded_features, columns=encoder.get_feature_names_out(categorical_cols))
train_data = train_data.drop(categorical_cols, axis=1).reset_index(drop=True)
train_data = pd.concat([train_data, encoded_df], axis=1)

encoded_features = encoder.transform(test_data[categorical_cols])
encoded_df = pd.DataFrame(encoded_features, columns=encoder.get_feature_names_out(categorical_cols))
test_data = test_data.drop(categorical_cols, axis=1).reset_index(drop=True)
test_data = pd.concat([test_data, encoded_df], axis=1)


trn = RandomForestClassifier(max_leaf_nodes=500, random_state=42)
trn.fit(train_data.drop('Class', axis=1), train_data['Class'])

Train_AUC = roc_auc_score(train_data['Class'], trn.predict_proba(train_data.drop('Class', axis=1))[:, 1])
Train_Accuracy = accuracy_score(train_data['Class'], trn.predict(train_data.drop('Class', axis=1)))
Train_F1_score = f1_score(train_data['Class'], trn.predict(train_data.drop('Class', axis=1)))

Test_AUC = roc_auc_score(test_data['Class'], trn.predict_proba(test_data.drop('Class', axis=1))[:, 1])
Test_Accuracy = accuracy_score(test_data['Class'], trn.predict(test_data.drop('Class', axis=1)))
Test_F1_score = f1_score(test_data['Class'], trn.predict(test_data.drop('Class', axis=1)))

print(f"Train_AUC:{Train_AUC}")
print(f"Train_Accuracy:{Train_Accuracy}")
print(f"Train_F1_score:{Train_F1_score}")
print(f"Test_AUC:{Test_AUC}")
print(f"Test_Accuracy:{Test_Accuracy}")
print(f"Test_F1_score:{Test_F1_score}")
# ```end