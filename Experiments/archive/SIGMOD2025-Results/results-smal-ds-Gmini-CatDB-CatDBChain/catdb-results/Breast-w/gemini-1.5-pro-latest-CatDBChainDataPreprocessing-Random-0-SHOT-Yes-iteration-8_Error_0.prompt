SYSTEM MESSAGE:
Task: You are expert in coding assistant. Your task is fix the error of this pipeline code.### Input: The user will provide a pipeline code enclosed in "<CODE> pipline code will be here. </CODE>", and an error message enclosed in "<ERROR> error message will be here. </ERROR>".### Rule : Each codeblock ends with "```end" and starts with "```python".
---------------------------------------
PROMPT TEXT:
###  Schema, and Data Profiling Info:
"""
# Normal_Nucleoli (int), categorical-values [4,1,10,2,7,3,9,8,6,5]
# Bland_Chromatin (int), categorical-values [3,4,1,10,2,7,9,8,5,6]
# Clump_Thickness (int), categorical-values [5,3,6,8,2,1,4,7,10,9]
# Cell_Shape_Uniformity (int), categorical-values [3,1,5,8,2,4,7,6,10,9]
# Bare_Nuclei (int), categorical-values [4,1,5,3,8,10,2,6,7,9]
# Cell_Size_Uniformity (int), categorical-values [3,1,10,8,4,9,2,5,6,7]
# Marginal_Adhesion (int), categorical-values [4,1,3,5,8,7,10,2,6,9]
# Mitoses (int), categorical-values [1,3,2,4,6,7,10,8,5]
# Single_Epi_Cell_Size (int), categorical-values [2,8,4,3,5,1,6,7,10,9]
# Class (bool, **This is a target column**), categorical-values [1,0]
"""


### <CODE>
# ```python
import pandas as pd
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.multiprocessing import Pool

categorical_cols = ['Normal_Nucleoli', 'Bland_Chromatin', 'Clump_Thickness', 'Cell_Shape_Uniformity',
                   'Bare_Nuclei', 'Cell_Size_Uniformity', 'Marginal_Adhesion', 'Mitoses', 'Single_Epi_Cell_Size',
                   'Class']

train_data = pd.read_csv('../../../data/Breast-w/Breast-w_train.csv')
test_data = pd.read_csv('../../../data/Breast-w/Breast-w_test.csv')

encoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False)

preprocessor = ColumnTransformer(
    transformers=[
        ('cat', encoder, categorical_cols)
    ],
    remainder='passthrough'
)

pipeline = Pipeline([
    ('preprocessor', preprocessor)
])

def process_data(data):
    return pipeline.fit_transform(data)

with Pool() as pool:
    # Process the training and test data in parallel
    train_data_processed, test_data_processed = pool.map(process_data, [train_data, test_data])
# ```end
</CODE>

### <ERROR>
ModuleNotFoundError: No module named 'sklearn.multiprocessing'
</ERROR>

### Question: Fix the code error provided and return only the corrected pipeline without additional explanations regarding the resolved error.