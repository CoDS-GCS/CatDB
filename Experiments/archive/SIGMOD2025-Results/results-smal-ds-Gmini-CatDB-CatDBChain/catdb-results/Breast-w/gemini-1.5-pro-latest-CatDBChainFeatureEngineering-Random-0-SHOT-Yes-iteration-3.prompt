SYSTEM MESSAGE:
###  Task: Select the appropriate features and target variables for the question (Feature Engineering Task). Additional columns add new semantic information, additional columns that are useful for a downstream algorithmpredicting "Class". They can e.g. be feature combinations, transformations, aggregations where the new column is a function of the existing columns. Use appropriate scale factor for columns are needto transfer.
###  Input: first draft version of pipline with a Data Preprocessing task enclosed in "<CODE> pipline code will be here. </CODE>", and a schema that describes the columns and data types of the dataset, and a data profiling info that summarizes the statistics and quality of the dataset.
###  Output: A modified Python 3.10 code with additional feature enginnering tasks that performs the following steps:
#1 : The target feature in the dataset is "Class".
#2 : Perform drops columns, if these may be redundant and hurt the predictive performance of the downstream classifier (Feature selection). Dropping columns may help as the chance of overfitting is lower, especially if the dataset is small. The Class will be trained on the dataset with the generated columns and evaluated on a holdout set.
#3 : If the question is not relevant to the dataset or the task, the output should be: "Insufficient information."
#4 : Don't display the first few rows of the datasets.
#5 : Each codeblock ends with "```end" and starts with "```python".
#6 : Don't use "if __name__ == '__main__':" style, use only flat mode.
---------------------------------------
PROMPT TEXT:
###  Description of the dataset:

**Breast Cancer Wisconsin (Original) Data Set.** Features are computed from a digitized image of a fine needle aspirate (FNA) of a breast mass. They describe characteristics of the cell nuclei present in the image. The target feature records the prognosis (malignant or benign). [Original data available here](ftp://ftp.cs.wisc.edu/math-prog/cpo-dataset/machine-learn/cancer/)  

Current dataset was adapted to ARFF format from the UCI version. Sample code ID's were removed.  

! Note that there is also a related Breast Cancer Wisconsin (Diagnosis) Data Set with a different set of features, better known as [wdbc](https://www.openml.org/d/1510).



 Citation request  

This breast cancer database was obtained from the University of Wisconsin Hospitals, Madison from Dr. William H. Wolberg.  If you publish results when using this database, then please include this information in your acknowledgments.  Also, please cite one or more of:

   1. O. L. Mangasarian and W. H. Wolberg: "Cancer diagnosis via linear 
      programming", SIAM News, Volume 23, Number 5, September 1990, pp 1 & 18.

   2. William H. Wolberg and O.L. Mangasarian: "Multisurface method of 
      pattern separation for medical diagnosis applied to breast cytology", 
      Proceedings of the National Academy of Sciences, U.S.A., Volume 87, 
      December 1990, pp 9193-9196.

   3. O. L. Mangasarian, R. Setiono, and W.H. Wolberg: "Pattern recognition 
      via linear programming: Theory and application to medical diagnosis", 
      in: "Large-scale numerical optimization", Thomas F. Coleman and Yuying
      Li, editors, SIAM Publications, Philadelphia 1990, pp 22-30.

   4. K. P. Bennett & O. L. Mangasarian: "Robust linear programming 
      discrimination of two linearly inseparable sets", Optimization Methods
      and Software 1, 1992, 23-34 (Gordon & Breach Science Publishers).


### <CODE>
# ```python
import pandas as pd
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

categorical_features = ['Normal_Nucleoli', 'Bland_Chromatin', 'Clump_Thickness',
                       'Cell_Shape_Uniformity', 'Bare_Nuclei', 'Cell_Size_Uniformity',
                       'Marginal_Adhesion', 'Mitoses', 'Single_Epi_Cell_Size', 'Class']

train_data = pd.read_csv("../../../data/Breast-w/Breast-w_train.csv")
test_data = pd.read_csv("../../../data/Breast-w/Breast-w_test.csv")

encoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False)

preprocessor = ColumnTransformer(
    transformers=[('cat', encoder, categorical_features)],
    remainder='passthrough',
    n_jobs=-1  # Use all available cores for parallel processing
)

pipeline = Pipeline([
    ('preprocessor', preprocessor)
])

train_data_processed = pipeline.fit_transform(train_data)

test_data_processed = pipeline.transform(test_data)
# ```end
</CODE>

### Schema, and Data Profiling Info:
"""
# Normal_Nucleoli (int), categorical-values [4,1,10,2,7,3,9,8,6,5]
# Bland_Chromatin (int), categorical-values [3,4,1,10,2,7,9,8,5,6]
# Clump_Thickness (int), categorical-values [5,3,6,8,2,1,4,7,10,9]
# Cell_Shape_Uniformity (int), categorical-values [3,1,5,8,2,4,7,6,10,9]
# Bare_Nuclei (int), categorical-values [4,1,5,3,8,10,2,6,7,9]
# Cell_Size_Uniformity (int), categorical-values [3,1,10,8,4,9,2,5,6,7]
# Marginal_Adhesion (int), categorical-values [4,1,3,5,8,7,10,2,6,9]
# Mitoses (int), categorical-values [1,3,2,4,6,7,10,8,5]
# Single_Epi_Cell_Size (int), categorical-values [2,8,4,3,5,1,6,7,10,9]
# Class (bool, **This is a target column**), categorical-values [1,0]
"""

### Encode categorical values by "on-hot-encoder" for the following columns:
	# Columns: Normal_Nucleoli,Bland_Chromatin,Clump_Thickness,Cell_Shape_Uniformity,Bare_Nuclei,Cell_Size_Uniformity,Marginal_Adhesion,Mitoses,Single_Epi_Cell_Size,Class

### Dataset Attribute:
# Number of samples (rows) in training dataset: 699

### Question: Provide a pipeline code that modify the Data Preprocessing code by adding Feature Engineering tasks in a multi-threaded environment.