SYSTEM MESSAGE:
Task: You are expert in coding assistant. Your task is fix the error of this pipeline code.### Input: The user will provide a pipeline code enclosed in "<CODE> pipline code will be here. </CODE>", and an error message enclosed in "<ERROR> error message will be here. </ERROR>".### Rule : Each codeblock ends with "```end" and starts with "```python".
---------------------------------------
PROMPT TEXT:
###  Schema, and Data Profiling Info:
"""
# Wifes_education (int), categorical-values [3,2,0,1]
# Number_of_children_ever_born (int), categorical-values [6,2,1,7,8,4,0,11,5,3,10,9,12,13,16]
# Husbands_occupation (int), categorical-values [1,2,0,3]
# Wifes_age (int), categorical-values [48,32,28,20,47,30,44,22,25,37,29,21,19,35,26,23,27,36,34,41,and 14 more]
# Standard-of-living_index (int), categorical-values [3,2,1,0]
# Husbands_education (int), categorical-values [3,0,1,2]
# Wifes_now_working%3F (bool), categorical-values [1,0]
# Wifes_religion (bool), categorical-values [0,1]
# Media_exposure (bool), categorical-values [0,1]
# Contraceptive_method_used (int, **This is a target column**), categorical-values [1,0,2]
"""


### <CODE>
# ```python
import pandas as pd
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, log_loss
from sklearn.metrics import roc_auc_score
import numpy as np

train_data = pd.read_csv("../../../data/CMC/CMC_train.csv")
test_data = pd.read_csv("../../../data/CMC/CMC_test.csv")

combined_data = pd.concat([train_data, test_data], axis=0)

categorical_cols = ['Wifes_education', 'Number_of_children_ever_born', 'Husbands_occupation', 'Wifes_age', 'Standard-of-living_index', 'Husbands_education', 'Contraceptive_method_used', 'Wifes_now_working%', 'Wifes_religion', 'Media_exposure']

enc = OneHotEncoder(handle_unknown='ignore')
enc.fit(combined_data[categorical_cols])

num_train_rows = train_data.shape[0]
train_encoded = enc.transform(train_data[categorical_cols]).toarray()
train_encoded_df = pd.DataFrame(train_encoded)
train_data = pd.concat([train_data, train_encoded_df], axis=1)

test_encoded = enc.transform(test_data[categorical_cols]).toarray()
test_encoded_df = pd.DataFrame(test_encoded)
test_data = pd.concat([test_data, test_encoded_df], axis=1)

noise_factor = 0.05
numerical_cols = ['Wifes_age', 'Number_of_children_ever_born']  
for col in numerical_cols:
    # Gaussian noise
    train_data[col + '_augmented'] = train_data[col] + noise_factor * np.random.randn(len(train_data))
    test_data[col + '_augmented'] = test_data[col] + noise_factor * np.random.randn(len(test_data))

train_data['Combined_Education'] = train_data['Wifes_education'] + train_data['Husbands_education']
test_data['Combined_Education'] = test_data['Wifes_education'] + test_data['Husbands_education']

train_data['Age_at_First_Child'] = train_data['Wifes_age'] - train_data['Number_of_children_ever_born']
test_data['Age_at_First_Child'] = test_data['Wifes_age'] - test_data['Number_of_children_ever_born']

train_data.drop(columns=['Wifes_education'], inplace=True)
test_data.drop(columns=['Wifes_education'], inplace=True)
train_data.drop(columns=['Husbands_education'], inplace=True)
test_data.drop(columns=['Husbands_education'], inplace=True)
train_data.drop(columns=['Standard_of_living_index'], inplace=True)
test_data.drop(columns=['Standard_of_living_index'], inplace=True)

X_train = train_data.drop('Contraceptive_method_used', axis=1)
y_train = train_data['Contraceptive_method_used']
X_test = test_data.drop('Contraceptive_method_used', axis=1)
y_test = test_data['Contraceptive_method_used']

trn = RandomForestClassifier(max_leaf_nodes=500)
trn.fit(X_train, y_train)

Train_Accuracy = accuracy_score(y_train, trn.predict(X_train))
Test_Accuracy = accuracy_score(y_test, trn.predict(X_test))

Train_Log_loss = log_loss(y_train, trn.predict_proba(X_train))
Test_Log_loss = log_loss(y_test, trn.predict_proba(X_test))

Train_AUC_OVO = roc_auc_score(y_train, trn.predict_proba(X_train), multi_class='ovo')
Train_AUC_OVR = roc_auc_score(y_train, trn.predict_proba(X_train), multi_class='ovr')
Test_AUC_OVO = roc_auc_score(y_test, trn.predict_proba(X_test), multi_class='ovo')
Test_AUC_OVR = roc_auc_score(y_test, trn.predict_proba(X_test), multi_class='ovr')

print(f"Train_AUC_OVO:{Train_AUC_OVO}")
print(f"Train_AUC_OVR:{Train_AUC_OVR}")
print(f"Train_Accuracy:{Train_Accuracy}")
print(f"Train_Log_loss:{Train_Log_loss}")
print(f"Test_AUC_OVO:{Test_AUC_OVO}")
print(f"Test_AUC_OVR:{Test_AUC_OVR}")
print(f"Test_Accuracy:{Test_Accuracy}")
print(f"Test_Log_loss:{Test_Log_loss}")
# ```end
</CODE>

### <ERROR>
KeyError: ['Wifes_now_working%'] not in index
</ERROR>

### Question: Fix the code error provided and return only the corrected pipeline without additional explanations regarding the resolved error.