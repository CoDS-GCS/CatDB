SYSTEM MESSAGE:
Task: You are expert in coding assistant. Your task is fix the error of this pipeline code.### Input: The user will provide a pipeline code enclosed in "<CODE> pipline code will be here. </CODE>", and an error message enclosed in "<ERROR> error message will be here. </ERROR>".### Rule : Each codeblock ends with "```end" and starts with "```python".
---------------------------------------
PROMPT TEXT:
###  Schema, and Data Profiling Info:
"""
# Wifes_education (int), categorical-values [3,2,0,1]
# Number_of_children_ever_born (int), categorical-values [6,2,1,7,8,4,0,11,5,3,10,9,12,13,16]
# Husbands_occupation (int), categorical-values [1,2,0,3]
# Wifes_age (int), categorical-values [48,32,28,20,47,30,44,22,25,37,29,21,19,35,26,23,27,36,34,41,and 14 more]
# Standard-of-living_index (int), categorical-values [3,2,1,0]
# Husbands_education (int), categorical-values [3,0,1,2]
# Wifes_now_working%3F (bool), categorical-values [1,0]
# Wifes_religion (bool), categorical-values [0,1]
# Media_exposure (bool), categorical-values [0,1]
# Contraceptive_method_used (int, **This is a target column**), categorical-values [1,0,2]
"""


### <CODE>
# ```python
import pandas as pd
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from multiprocessing import Pool

categorical_cols = ['Wifes_education', 'Number_of_children_ever_born', 'Husbands_occupation', 'Wifes_age',
                   'Standard_of_living_index', 'Husbands_education', 'Contraceptive_method_used',
                   'Wifes_now_working%3F', 'Wifes_religion', 'Media_exposure']

train_data = pd.read_csv("../../../data/CMC/CMC_train.csv")
test_data = pd.read_csv("../../../data/CMC/CMC_test.csv")

encoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False)

preprocessor = ColumnTransformer(
    transformers=[('cat', encoder, categorical_cols)],
    remainder='passthrough'
)

pipeline = Pipeline([
    ('preprocessor', preprocessor)
])

def process_data(data):
    return pipeline.fit_transform(data)

with Pool() as pool:
    # Process the training and test data in parallel
    train_data_processed = pool.apply_async(process_data, [train_data])
    test_data_processed = pool.apply_async(process_data, [test_data])

    # Get the results
    train_data_processed = train_data_processed.get()
    test_data_processed = test_data_processed.get()
# ```end
</CODE>

### <ERROR>
PicklingError: Can't pickle <function process_data at 0x7f3330527880>: attribute lookup process_data on __main__ failed
</ERROR>

### Question: Fix the code error provided and return only the corrected pipeline without additional explanations regarding the resolved error.