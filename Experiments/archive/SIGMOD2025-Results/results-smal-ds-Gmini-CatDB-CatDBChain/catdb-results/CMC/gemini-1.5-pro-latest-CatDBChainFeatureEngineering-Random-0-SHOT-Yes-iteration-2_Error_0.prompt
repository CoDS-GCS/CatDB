SYSTEM MESSAGE:
Task: You are expert in coding assistant. Your task is fix the error of this pipeline code.### Input: The user will provide a pipeline code enclosed in "<CODE> pipline code will be here. </CODE>", and an error message enclosed in "<ERROR> error message will be here. </ERROR>".### Rule : Each codeblock ends with "```end" and starts with "```python".
---------------------------------------
PROMPT TEXT:
###  Schema, and Data Profiling Info:
"""
# Wifes_education (int), categorical-values [3,2,0,1]
# Number_of_children_ever_born (int), categorical-values [6,2,1,7,8,4,0,11,5,3,10,9,12,13,16]
# Husbands_occupation (int), categorical-values [1,2,0,3]
# Wifes_age (int), categorical-values [48,32,28,20,47,30,44,22,25,37,29,21,19,35,26,23,27,36,34,41,and 14 more]
# Standard-of-living_index (int), categorical-values [3,2,1,0]
# Husbands_education (int), categorical-values [3,0,1,2]
# Wifes_now_working%3F (bool), categorical-values [1,0]
# Wifes_religion (bool), categorical-values [0,1]
# Media_exposure (bool), categorical-values [0,1]
# Contraceptive_method_used (int, **This is a target column**), categorical-values [1,0,2]
"""


### <CODE>
# ```python
import pandas as pd
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.compose import make_column_selector as selector
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.multioutput import MultiOutputClassifier

data = pd.read_csv("../../../data/CMC/CMC.csv")

X = data.drop('Contraceptive_method_used', axis=1)
y = data['Contraceptive_method_used']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

categorical_features = ['Wifes_education', 'Husbands_occupation', 'Standard_of_living_index', 'Husbands_education']
numerical_features = ['Number_of_children_ever_born', 'Wifes_age']

preprocessor = ColumnTransformer(
    transformers=[
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features),
        # No numerical transformations for now
    ])

model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('classifier', LogisticRegression(max_iter=1000))  # Increased max_iter
])

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")
# ```end
</CODE>

### <ERROR>
ValueError: A given column is not a column of the dataframe
</ERROR>

### Question: Fix the code error provided and return only the corrected pipeline without additional explanations regarding the resolved error.