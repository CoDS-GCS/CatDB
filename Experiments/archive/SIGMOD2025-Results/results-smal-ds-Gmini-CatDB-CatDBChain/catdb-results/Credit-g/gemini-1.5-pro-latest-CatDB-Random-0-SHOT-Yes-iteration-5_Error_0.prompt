SYSTEM MESSAGE:
Task: You are expert in coding assistant. Your task is fix the error of this pipeline code.### Input: The user will provide a pipeline code enclosed in "<CODE> pipline code will be here. </CODE>", and an error message enclosed in "<ERROR> error message will be here. </ERROR>".### Rule : Each codeblock ends with "```end" and starts with "```python".
---------------------------------------
PROMPT TEXT:
###  Schema, and Data Profiling Info:
"""
# residence_since (int), categorical-values [1,2,4,3]
# savings_status (int), categorical-values [0,1,4,2,3]
# job (int), categorical-values [2,3,1,0]
# purpose (int), categorical-values [0,1,3,9,6,2,5,8,4,10]
# credit_amount (int), distinct-count [921], min-value [250.0], max-value [18424.0], median-value [2319.5], mean-value [3271.258]
# property_magnitude (int), categorical-values [0,2,3,1]
# personal_status (int), categorical-values [2,1,0,3]
# num_dependents (int), categorical-values [1,2]
# existing_credits (int), categorical-values [2,1,4,3]
# employment (int), categorical-values [2,4,0,3,1]
# other_payment_plans (int), categorical-values [2,0,1]
# housing (int), categorical-values [1,2,0]
# duration (int), categorical-values [9,39,24,12,48,18,36,6,10,13,15,27,30,21,60,54,42,7,11,4,and 13 more]
# checking_status (int), categorical-values [3,0,1,2]
# installment_commitment (int), categorical-values [3,4,2,1]
# credit_history (int), categorical-values [4,2,0,3,1]
# other_parties (int), categorical-values [0,1,2]
# age (int), distinct-count [53], min-value [19.0], max-value [75.0], median-value [33.0], mean-value [35.546]
# foreign_worker (bool), categorical-values [0,1]
# own_telephone (bool), categorical-values [0,1]
# class (bool, **This is a target column**), categorical-values [0,1]
"""


### <CODE>
# ```python
import pandas as pd
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, f1_score, roc_auc_score

train_data = pd.read_csv("../../../data/Credit-g/Credit-g_train.csv")
test_data = pd.read_csv("../../../data/Credit-g/Credit-g_test.csv")

train_data['savings_status_vs_credit_amount'] = train_data['savings_status'] / train_data['credit_amount']
test_data['savings_status_vs_credit_amount'] = test_data['savings_status'] / test_data['credit_amount']

categorical_cols = ['residence_since', 'savings_status', 'job', 'purpose', 'property_magnitude', 'personal_status',
                   'num_dependents', 'existing_credits', 'employment', 'other_payment_plans', 'housing', 'duration',
                   'checking_status', 'installment_commitment', 'credit_history', 'other_parties', 'foreign_worker',
                   'own_telephone', 'class']
enc = OneHotEncoder(handle_unknown='ignore')
enc.fit(pd.concat([train_data[categorical_cols], test_data[categorical_cols]]))
train_encoded = pd.DataFrame(enc.transform(train_data[categorical_cols]).toarray())
test_encoded = pd.DataFrame(enc.transform(test_data[categorical_cols]).toarray())
train_data = train_data.reset_index(drop=True).join(train_encoded)
test_data = test_data.reset_index(drop=True).join(test_encoded)

X_train = train_data.drop(columns=['class', *categorical_cols])
y_train = train_data['class']
X_test = test_data.drop(columns=['class', *categorical_cols])
y_test = test_data['class']

trn = RandomForestClassifier(max_leaf_nodes=500)
trn.fit(X_train, y_train)

Train_AUC = roc_auc_score(y_train, trn.predict_proba(X_train)[:, 1])
Train_Accuracy = accuracy_score(y_train, trn.predict(X_train))
Train_F1_score = f1_score(y_train, trn.predict(X_train))
Test_AUC = roc_auc_score(y_test, trn.predict_proba(X_test)[:, 1])
Test_Accuracy = accuracy_score(y_test, trn.predict(X_test))
Test_F1_score = f1_score(y_test, trn.predict(X_test))
print(f"Train_AUC:{Train_AUC}")
print(f"Train_Accuracy:{Train_Accuracy}")
print(f"Train_F1_score:{Train_F1_score}")
print(f"Test_AUC:{Test_AUC}")
print(f"Test_Accuracy:{Test_Accuracy}")
print(f"Test_F1_score:{Test_F1_score}")
# ```end
</CODE>

### <ERROR>
TypeError: Feature names are only supported if all input features have string names, but your input has ['int', 'str'] as feature name / column name types. If you want feature names to be stored and validated, you must convert them all to strings, by using X.columns = X.columns.astype(str) for example. Otherwise you can remove feature / column names from your input data, or convert them all to a non-string data type.
</ERROR>

### Question: Fix the code error provided and return only the corrected pipeline without additional explanations regarding the resolved error.