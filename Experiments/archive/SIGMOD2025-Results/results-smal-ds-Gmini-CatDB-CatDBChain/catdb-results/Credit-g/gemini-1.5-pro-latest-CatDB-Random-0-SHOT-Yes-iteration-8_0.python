# ```python
import pandas as pd
from sklearn.preprocessing import OneHotEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, f1_score, roc_auc_score

train_data = pd.read_csv("../../../data/Credit-g/Credit-g_train.csv")
test_data = pd.read_csv("../../../data/Credit-g/Credit-g_test.csv")



categorical_cols = ['residence_since', 'savings_status', 'job', 'purpose', 'property_magnitude', 'personal_status',
                   'num_dependents', 'existing_credits', 'employment', 'other_payment_plans', 'housing', 'duration',
                   'checking_status', 'installment_commitment', 'credit_history', 'other_parties', 'foreign_worker',
                   'own_telephone', 'class']
encoder = OneHotEncoder(handle_unknown='ignore')
encoder.fit(pd.concat([train_data[categorical_cols], test_data[categorical_cols]]))  # Fit on combined data

def add_features(df):
    # Feature: Combined Savings and Checking Status
    # Usefulness: Provides a stronger indication of financial stability than individual statuses.
    df['combined_financial_status'] = df['savings_status'].astype(str) + '_' + df['checking_status'].astype(str)

    # Feature: Credit Amount to Income Ratio
    # Usefulness: Represents the proportion of income dedicated to debt repayment, a crucial factor in credit risk.
    df['credit_to_income_ratio'] = df['credit_amount'] / (df['installment_commitment'] + 1)  # Avoid division by zero

    return df

train_data = add_features(train_data.copy())
test_data = add_features(test_data.copy())

train_data = pd.DataFrame(encoder.transform(train_data[categorical_cols]).toarray(), columns=encoder.get_feature_names_out(categorical_cols), index=train_data.index)
test_data = pd.DataFrame(encoder.transform(test_data[categorical_cols]).toarray(), columns=encoder.get_feature_names_out(categorical_cols), index=test_data.index)


trn = RandomForestClassifier(max_leaf_nodes=500, random_state=42)

trn.fit(train_data.drop(columns=['class_0', 'class_1']), train_data[['class_1']].values.ravel())

train_predictions = trn.predict(train_data.drop(columns=['class_0', 'class_1']))
test_predictions = trn.predict(test_data.drop(columns=['class_0', 'class_1']))

Train_Accuracy = accuracy_score(train_data[['class_1']].values.ravel(), train_predictions)
Test_Accuracy = accuracy_score(test_data[['class_1']].values.ravel(), test_predictions)

Train_F1_score = f1_score(train_data[['class_1']].values.ravel(), train_predictions)
Test_F1_score = f1_score(test_data[['class_1']].values.ravel(), test_predictions)

Train_AUC = roc_auc_score(train_data[['class_1']].values.ravel(), train_predictions)
Test_AUC = roc_auc_score(test_data[['class_1']].values.ravel(), test_predictions)

print(f"Train_AUC:{Train_AUC}")
print(f"Train_Accuracy:{Train_Accuracy}")
print(f"Train_F1_score:{Train_F1_score}")
print(f"Test_AUC:{Test_AUC}")
print(f"Test_Accuracy:{Test_Accuracy}")
print(f"Test_F1_score:{Test_F1_score}")
# ```end