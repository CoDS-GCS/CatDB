# ```python
import pandas as pd
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, log_loss, roc_auc_score

train_data = pd.read_csv("../../../data/Eucalyptus/Eucalyptus_train.csv")
test_data = pd.read_csv("../../../data/Eucalyptus/Eucalyptus_test.csv")


def augment_data(df):
  # Example: Adding Gaussian noise to numerical features
  for col in ['DBH', 'Ht', 'Surv']:
    df[col + '_augmented'] = df[col] + np.random.normal(0, 0.1, len(df))
  return df

train_data = augment_data(train_data.copy())
test_data = augment_data(test_data.copy())

categorical_cols = ['Stem_Fm', 'Vig', 'Brnch_Fm', 'Ins_res', 'Crown_Fm', 'Altitude', 'Rep', 'Rainfall', 'Map_Ref', 'Locality', 'Frosts', 'Utility', 'Sp', 'Latitude', 'Year', 'Abbrev']
encoder = OneHotEncoder(handle_unknown='ignore')
encoder.fit(pd.concat([train_data[categorical_cols], test_data[categorical_cols]]))

def encode_data(df):
  encoded_features = encoder.transform(df[categorical_cols]).toarray()
  encoded_df = pd.DataFrame(encoded_features)
  df = df.reset_index(drop=True).join(encoded_df)
  return df

train_data = encode_data(train_data)
test_data = encode_data(test_data)

train_data['DBH_Ht_Ratio'] = train_data['DBH'] / train_data['Ht']
test_data['DBH_Ht_Ratio'] = test_data['DBH'] / test_data['Ht']

train_data.drop(columns=['PMCno'], inplace=True)
test_data.drop(columns=['PMCno'], inplace=True)

X_train = train_data.drop(columns=['Utility'])
y_train = train_data['Utility']
X_test = test_data.drop(columns=['Utility'])
y_test = test_data['Utility']

trn = RandomForestClassifier(max_leaf_nodes=500)
trn.fit(X_train, y_train)

Train_Accuracy = accuracy_score(y_train, trn.predict(X_train))
Test_Accuracy = accuracy_score(y_test, trn.predict(X_test))

Train_Log_loss = log_loss(y_train, trn.predict_proba(X_train))
Test_Log_loss = log_loss(y_test, trn.predict_proba(X_test))

Train_AUC_OVO = roc_auc_score(y_train, trn.predict_proba(X_train), multi_class='ovo')
Train_AUC_OVR = roc_auc_score(y_train, trn.predict_proba(X_train), multi_class='ovr')
Test_AUC_OVO = roc_auc_score(y_test, trn.predict_proba(X_test), multi_class='ovo')
Test_AUC_OVR = roc_auc_score(y_test, trn.predict_proba(X_test), multi_class='ovr')

print(f"Train_AUC_OVO:{Train_AUC_OVO}")
print(f"Train_AUC_OVR:{Train_AUC_OVR}")
print(f"Train_Accuracy:{Train_Accuracy}")
print(f"Train_Log_loss:{Train_Log_loss}")
print(f"Test_AUC_OVO:{Test_AUC_OVO}")
print(f"Test_AUC_OVR:{Test_AUC_OVR}")
print(f"Test_Accuracy:{Test_Accuracy}")
print(f"Test_Log_loss:{Test_Log_loss}")
# ```end