SYSTEM MESSAGE:
Task: You are expert in coding assistant. Your task is fix the error of this pipeline code.### Input: The user will provide a pipeline code enclosed in "<CODE> pipline code will be here. </CODE>", and an error message enclosed in "<ERROR> error message will be here. </ERROR>".### Rule : Each codeblock ends with "```end" and starts with "```python".
---------------------------------------
PROMPT TEXT:
###  Schema, and Data Profiling Info:
"""
# black_piece0_file (int), categorical-values [0,5,2,6,1,3,4]
# white_piece0_strength (int), categorical-values [7,0,5,4,6]
# black_piece0_strength (int), categorical-values [4,0,6,7,5]
# black_piece0_rank (int), categorical-values [1,4,6,7,0,2,8,5,3]
# white_piece0_rank (int), categorical-values [2,0,3,1,4,5,7,6,8]
# white_piece0_file (int), categorical-values [1,5,4,6,2,0,3]
# class (int, **This is a target column**), categorical-values [2,0,1]
"""


### <CODE>
# ```python
import pandas as pd
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, log_loss
from sklearn.metrics import roc_auc_score

train_data = pd.read_csv("../../../data/Jungle-Chess/Jungle-Chess_train.csv")
test_data = pd.read_csv("../../../data/Jungle-Chess/Jungle-Chess_test.csv")

enc = OneHotEncoder(handle_unknown='ignore')

enc.fit(train_data.drop('class', axis=1))

train_data_encoded = enc.transform(train_data.drop('class', axis=1))
test_data_encoded = enc.transform(test_data.drop('class', axis=1))

X_train = train_data_encoded
y_train = train_data['class']
X_test = test_data_encoded
y_test = test_data['class']

trn = RandomForestClassifier(max_leaf_nodes=500)

trn.fit(X_train, y_train)

y_pred_train = trn.predict(X_train)
y_pred_test = trn.predict(X_test)

Train_Accuracy = accuracy_score(y_train, y_pred_train)
Test_Accuracy = accuracy_score(y_test, y_pred_test)

Train_Log_loss = log_loss(y_train, y_pred_train)
Test_Log_loss = log_loss(y_test, y_pred_test)

Train_AUC_OVO = roc_auc_score(y_train, trn.predict_proba(X_train), multi_class='ovo')
Train_AUC_OVR = roc_auc_score(y_train, trn.predict_proba(X_train), multi_class='ovr')
Test_AUC_OVO = roc_auc_score(y_test, trn.predict_proba(X_test), multi_class='ovo')
Test_AUC_OVR = roc_auc_score(y_test, trn.predict_proba(X_test), multi_class='ovr')

print(f"Train_AUC_OVO:{Train_AUC_OVO}")
print(f"Train_AUC_OVR:{Train_AUC_OVR}")
print(f"Train_Accuracy:{Train_Accuracy}")
print(f"Train_Log_loss:{Train_Log_loss}")
print(f"Test_AUC_OVO:{Test_AUC_OVO}")
print(f"Test_AUC_OVR:{Test_AUC_OVR}")
print(f"Test_Accuracy:{Test_Accuracy}")
print(f"Test_Log_loss:{Test_Log_loss}")
# ```end
</CODE>

### <ERROR>
ValueError: y_true and y_pred contain different number of classes 3, 2. Please provide the true labels explicitly through the labels argument. Classes found in y_true: [0. 1. 2.]
</ERROR>

### Question: Fix the code error provided and return only the corrected pipeline without additional explanations regarding the resolved error.