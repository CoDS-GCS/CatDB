# ```python
import pandas as pd
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import FunctionTransformer
from sklearn.compose import make_column_transformer, make_column_selector
from sklearn.pipeline import make_pipeline
import multiprocessing

categorical_features = ['black_piece0_file', 'white_piece0_strength', 'black_piece0_strength',
                        'black_piece0_rank', 'white_piece0_rank', 'white_piece0_file']
numerical_features = ['piece_strength_difference', 'piece_rank_difference']

def create_features(X):
    X_ = X.copy()
    X_['piece_strength_difference'] = X_['black_piece0_strength'] - X_['white_piece0_strength']
    X_['piece_rank_difference'] = X_['black_piece0_rank'] - X_['white_piece0_rank']
    return X_

feature_engineering = FunctionTransformer(create_features)

categorical_transformer = make_pipeline(
    feature_engineering,
    OneHotEncoder(handle_unknown='ignore', sparse_output=False)
)

numerical_transformer = make_pipeline(
    feature_engineering
)

preprocessor = make_column_transformer(
    (categorical_transformer, categorical_features),
    (numerical_transformer, numerical_features),
    remainder='passthrough'
)

pipeline = Pipeline([
    ('preprocessor', preprocessor)
])

train_data = pd.read_csv("../../../data/Jungle-Chess/Jungle-Chess_train.csv")
test_data = pd.read_csv("../../../data/Jungle-Chess/Jungle-Chess_test.csv")

X_train = train_data.drop('class', axis=1)
y_train = train_data['class']
X_test = test_data.drop('class', axis=1)
y_test = test_data['class']

X_train_transformed = pipeline.fit_transform(X_train)
X_test_transformed = pipeline.transform(X_test)
# ```end