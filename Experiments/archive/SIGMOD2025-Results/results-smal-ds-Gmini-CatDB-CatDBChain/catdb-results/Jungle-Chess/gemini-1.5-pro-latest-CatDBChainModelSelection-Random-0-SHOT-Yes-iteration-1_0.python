# ```python
import pandas as pd
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import FunctionTransformer
from sklearn.compose import make_column_transformer, make_column_selector
from sklearn.pipeline import make_pipeline
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, log_loss, roc_auc_score
import multiprocessing

categorical_features = ['black_piece0_file', 'white_piece0_strength', 'black_piece0_strength',
                        'black_piece0_rank', 'white_piece0_rank', 'white_piece0_file']
numerical_features = ['piece_strength_difference', 'piece_rank_difference']

def create_features(X):
    X_ = X.copy()
    X_['piece_strength_difference'] = X_['black_piece0_strength'] - X_['white_piece0_strength']
    X_['piece_rank_difference'] = X_['black_piece0_rank'] - X_['white_piece0_rank']
    return X_

feature_engineering = FunctionTransformer(create_features)

categorical_transformer = make_pipeline(
    OneHotEncoder(handle_unknown='ignore', sparse_output=False)
)

numerical_transformer = make_pipeline(

)

preprocessor = make_column_transformer(
    (categorical_transformer, categorical_features),
    (numerical_transformer, numerical_features),
    remainder='passthrough'
)

model = RandomForestClassifier(max_leaf_nodes=500, n_jobs=multiprocessing.cpu_count())

pipeline = Pipeline([
    ('feature_engineering', feature_engineering),
    ('preprocessor', preprocessor),
    ('model', model)
])
# ```end

# ```python
Train_Accuracy = accuracy_score(y_train, pipeline.predict(X_train))
Test_Accuracy = accuracy_score(y_test, pipeline.predict(X_test))

Train_Log_loss = log_loss(y_train, pipeline.predict_proba(X_train))
Test_Log_loss = log_loss(y_test, pipeline.predict_proba(X_test))

Train_AUC_OVO = roc_auc_score(y_train, pipeline.predict_proba(X_train), multi_class='ovo')
Train_AUC_OVR = roc_auc_score(y_train, pipeline.predict_proba(X_train), multi_class='ovr')
Test_AUC_OVO = roc_auc_score(y_test, pipeline.predict_proba(X_test), multi_class='ovo')
Test_AUC_OVR = roc_auc_score(y_test, pipeline.predict_proba(X_test), multi_class='ovr')

print(f"Train_AUC_OVO:{Train_AUC_OVO}")
print(f"Train_AUC_OVR:{Train_AUC_OVR}")
print(f"Train_Accuracy:{Train_Accuracy}")   
print(f"Train_Log_loss:{Train_Log_loss}") 
print(f"Test_AUC_OVO:{Test_AUC_OVO}")
print(f"Test_AUC_OVR:{Test_AUC_OVR}")
print(f"Test_Accuracy:{Test_Accuracy}")   
print(f"Test_Log_loss:{Test_Log_loss}")
# ```end