# ```python
import pandas as pd
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_val_score
from sklearn.metrics import roc_auc_score, accuracy_score, f1_score
import numpy as np
from sklearn.preprocessing import StandardScaler

numerical_features = ['loc', 'v(g)', 'ev(g)', 'iv(g)', 'N', 'V', 'L', 'D', 'I', 'E', 'B', 'T', 
                       'lOCode', 'lOComment', 'lOBlank', 'lOCodeAndComment', 'uniq_Op', 'uniq_Opnd', 
                       'total_Op', 'total_Opnd', 'branchCount']
categorical_features = ['L', 'uniq_Op', 'v(g)', 'ev(g)', 'iv(G)', 'lOComment', 'locCodeAndComment', 'lOBlank']

train_data = pd.read_csv("../../../data/PC1/PC1_train.csv")
test_data = pd.read_csv("../../../data/PC1/PC1_test.csv")

def feature_engineering(data):
    data['total_lines'] = data['lOCode'] + data['lOComment'] + data['lOBlank']
    data['comment_to_code_ratio'] = data['lOComment'] / data['lOCode']
    data['complexity_density'] = data['v(g)'] / data['lOCode']
    return data

train_data = feature_engineering(train_data)
test_data = feature_engineering(test_data)

numerical_features = numerical_features + ['total_lines', 'comment_to_code_ratio', 'complexity_density']

preprocessor = ColumnTransformer(
    transformers=[
        ('num', Pipeline(steps=[
            ('imputer', SimpleImputer(strategy='median')),
            ('scaler', StandardScaler())
        ]), numerical_features),
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
    ])

pipeline = Pipeline([
    ('preprocessor', preprocessor),
    ('classifier', RandomForestClassifier(n_jobs=-1, max_leaf_nodes=500, random_state=42))
])

pipeline.fit(train_data.drop('defects', axis=1), train_data['defects'])

train_predictions = pipeline.predict(train_data.drop('defects', axis=1))
Train_Accuracy = accuracy_score(train_data['defects'], train_predictions)
Train_F1_score = f1_score(train_data['defects'], train_predictions)
Train_AUC = roc_auc_score(train_data['defects'], train_predictions)

test_predictions = pipeline.predict(test_data.drop('defects', axis=1))
Test_Accuracy = accuracy_score(test_data['defects'], test_predictions)
Test_F1_score = f1_score(test_data['defects'], test_predictions)
Test_AUC = roc_auc_score(test_data['defects'], test_predictions)

print(f"Train_AUC:{Train_AUC}")
print(f"Train_Accuracy:{Train_Accuracy}")   
print(f"Train_F1_score:{Train_F1_score}")
print(f"Test_AUC:{Test_AUC}")
print(f"Test_Accuracy:{Test_Accuracy}")   
print(f"Test_F1_score:{Test_F1_score}") 
# ```end