# ```python
import pandas as pd
from sklearn.preprocessing import OneHotEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, f1_score, roc_auc_score

train_data = pd.read_csv("../../../data/Tic-Tac-Toe/Tic-Tac-Toe_train.csv")
test_data = pd.read_csv("../../../data/Tic-Tac-Toe/Tic-Tac-Toe_test.csv")



train_data['top-bottom-combination'] = train_data['top-left-square'] * 100 + train_data['top-middle-square'] * 10 + train_data['top-right-square'] - train_data['bottom-left-square'] * 100 - train_data['bottom-middle-square'] * 10 - train_data['bottom-right-square'] 
test_data['top-bottom-combination'] = test_data['top-left-square'] * 100 + test_data['top-middle-square'] * 10 + test_data['top-right-square'] - test_data['bottom-left-square'] * 100 - test_data['bottom-middle-square'] * 10 - test_data['bottom-right-square'] 

train_data['left-right-combination'] = train_data['top-left-square'] * 100 + train_data['middle-left-square'] * 10 + train_data['bottom-left-square'] - train_data['top-right-square'] * 100 - train_data['middle-right-square'] * 10 - train_data['bottom-right-square'] 
test_data['left-right-combination'] = test_data['top-left-square'] * 100 + test_data['middle-left-square'] * 10 + test_data['bottom-left-square'] - test_data['top-right-square'] * 100 - test_data['middle-right-square'] * 10 - test_data['bottom-right-square'] 

train_data['diagonal-combination'] = (train_data['top-left-square'] * 100 + train_data['middle-middle-square'] * 10 + train_data['bottom-right-square']) - (train_data['top-right-square'] * 100 + train_data['middle-middle-square'] * 10 + train_data['bottom-left-square'])
test_data['diagonal-combination'] = (test_data['top-left-square'] * 100 + test_data['middle-middle-square'] * 10 + test_data['bottom-right-square']) - (test_data['top-right-square'] * 100 + test_data['middle-middle-square'] * 10 + test_data['bottom-left-square'])

categorical_cols = ['bottom-middle-square', 'top-middle-square', 'bottom-left-square', 'middle-left-square',
                   'bottom-right-square', 'top-right-square', 'middle-right-square', 'middle-middle-square',
                   'top-left-square']
encoder = OneHotEncoder(handle_unknown='ignore')
encoder.fit(pd.concat([train_data[categorical_cols], test_data[categorical_cols]]))

encoded_train_features = encoder.transform(train_data[categorical_cols]).toarray()
encoded_test_features = encoder.transform(test_data[categorical_cols]).toarray()

encoded_train_df = pd.DataFrame(encoded_train_features)
encoded_test_df = pd.DataFrame(encoded_test_features)

train_data = pd.concat([train_data.reset_index(drop=True), encoded_train_df.reset_index(drop=True)], axis=1)
test_data = pd.concat([test_data.reset_index(drop=True), encoded_test_df.reset_index(drop=True)], axis=1)

train_data.drop(columns=['bottom-middle-square', 'top-middle-square', 'bottom-left-square', 'middle-left-square',
                       'bottom-right-square', 'top-right-square', 'middle-right-square', 'middle-middle-square',
                       'top-left-square', 'top-bottom-combination', 'left-right-combination', 'diagonal-combination'], inplace=True)
test_data.drop(columns=['bottom-middle-square', 'top-middle-square', 'bottom-left-square', 'middle-left-square',
                       'bottom-right-square', 'top-right-square', 'middle-right-square', 'middle-middle-square',
                       'top-left-square', 'top-bottom-combination', 'left-right-combination', 'diagonal-combination'], inplace=True)

y_train = train_data['Class']
y_test = test_data['Class']

trn = RandomForestClassifier(max_leaf_nodes=500)
trn.fit(train_data, y_train)

y_train_pred = trn.predict(train_data)
y_test_pred = trn.predict(test_data)

Train_Accuracy = accuracy_score(y_train, y_train_pred)
Test_Accuracy = accuracy_score(y_test, y_test_pred)
Train_F1_score = f1_score(y_train, y_train_pred)
Test_F1_score = f1_score(y_test, y_test_pred)
Train_AUC = roc_auc_score(y_train, y_train_pred)
Test_AUC = roc_auc_score(y_test, y_test_pred)

print(f"Train_AUC:{Train_AUC}")
print(f"Train_Accuracy:{Train_Accuracy}")
print(f"Train_F1_score:{Train_F1_score}")
print(f"Test_AUC:{Test_AUC}")
print(f"Test_Accuracy:{Test_Accuracy}")
print(f"Test_F1_score:{Test_F1_score}")
# ```end