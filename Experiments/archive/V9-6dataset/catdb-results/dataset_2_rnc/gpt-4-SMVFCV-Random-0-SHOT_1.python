# Import all required packages
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, f1_score

# Load the training and test datasets
train_data = pd.read_csv('../../../data/dataset_2_rnc/dataset_2_rnc_train.csv')
test_data = pd.read_csv('../../../data/dataset_2_rnc/dataset_2_rnc_test.csv')

# Perform data cleaning and preprocessing
# Drop columns with high missing value frequency
train_data.drop(columns=['c_14', 'c_10', 'c_19'], inplace=True)
test_data.drop(columns=['c_14', 'c_10', 'c_19'], inplace=True)

# Encode categorical columns
categorical_columns = ['c_18', 'c_16', 'c_11', 'c_8', 'c_15', 'c_3', 'c_12', 'c_9', 'c_7', 'c_6', 'c_20', 'c_17', 'c_21', 'c_1']
for column in categorical_columns:
    encoder = LabelEncoder()
    train_data[column] = encoder.fit_transform(train_data[column])
    test_data[column] = encoder.transform(test_data[column])

# Select the appropriate features and target variables for the question
# The target variable is 'c_21'
# The features are all the other columns
X_train = train_data.drop(columns=['c_21'])
y_train = train_data['c_21']
X_test = test_data.drop(columns=['c_21'])
y_test = test_data['c_21']

# Choose the suitable machine learning algorithm or technique (classifier)
# Logistic Regression is chosen because it is a simple and efficient algorithm for binary classification problems
# It is also easy to interpret and understand
classifier = LogisticRegression()
classifier.fit(X_train, y_train)

# Report evaluation based on only test dataset
# Calculate the model accuracy
y_pred = classifier.predict(X_test)
Accuracy = accuracy_score(y_test, y_pred)
F1_score = f1_score(y_test, y_pred)

# Print the accuracy result
print(f"Accuracy:{Accuracy}")   
# Print the f1 score result
print(f"F1_score:{F1_score}")