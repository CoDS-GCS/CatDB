# ```python
# Import all required packages
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, f1_score
# ```end

# ```python
# Load the training and test datasets
train_data = pd.read_csv('../../../data/dataset_6_rnc/dataset_6_rnc_train.csv')
test_data = pd.read_csv('../../../data/dataset_6_rnc/dataset_6_rnc_test.csv')
# ```end

# ```python
# Perform data cleaning and preprocessing
# As per the given schema, all columns are of integer type. So, we don't need to handle any categorical variables.
# Also, there is no mention of missing values. So, we assume that there are no missing values in the dataset.
# However, we need to scale the features as they have different ranges.

scaler = StandardScaler()
train_data_scaled = scaler.fit_transform(train_data.drop(columns=['c_11']))
test_data_scaled = scaler.transform(test_data.drop(columns=['c_11']))
# ```end

# ```python
# Select the appropriate features and target variables for the question
# As per the given question, we need to predict 'c_11'. So, 'c_11' is our target variable.
# All other columns are our features.

X_train = train_data_scaled
y_train = train_data['c_11']

X_test = test_data_scaled
y_test = test_data['c_11']
# ```end

# ```python
# Choose the suitable machine learning algorithm or technique (classifier)
# We will use Logistic Regression as our classifier. 
# Logistic Regression is a simple and fast algorithm suitable for binary classification problems. 
# It is also less prone to overfitting.

clf = LogisticRegression()
clf.fit(X_train, y_train)
# ```end

# ```python
# Report evaluation based on only test dataset
# We will use accuracy and f1 score as our evaluation metrics.

y_pred = clf.predict(X_test)

Accuracy = accuracy_score(y_test, y_pred)
F1_score = f1_score(y_test, y_pred)

print(f"Accuracy:{Accuracy}")
print(f"F1_score:{F1_score}")
# ```end