# ```python
# Import all required packages
import pandas as pd
from sklearn.preprocessing import MinMaxScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score, mean_squared_error
import numpy as np
# ```end

# ```python
# Load the training and test datasets
train_data = pd.read_csv('../../../data/aloi/aloi_train.csv')
test_data = pd.read_csv('../../../data/aloi/aloi_test.csv')
# ```end

# ```python
# Define the columns to be scaled and encoded
scale_cols = [109,45,37,116,61,31,62,19,98,7,123,41,44,54,27,88,0,82,48,106,51,114,40,24,2,127,47,46,83,1,110,93,3,75,56,16,21,99,43,34,67,14,100,95,77,49,64,79,103,59,87,68,50,92,113,58,33,120,30,105,26,25,111,63,122,65,15,94,78,71,121,38,90,73,101,81,52,74,53,57,29,20,42,102,125,36,76,11,108,8,12,97,13,72,124,69,70,5,107,117,55,89,112,6,10,35,86,126,23,17,115,39,9,60,104,4,118,119,85,80,32,22,66,18,84,28,91,96]
encode_cols = scale_cols
# ```end

# ```python
# Define the preprocessing steps
preprocessor = ColumnTransformer(
    transformers=[
        ('num', MinMaxScaler(), scale_cols),
        ('cat', OneHotEncoder(), encode_cols)])
# ```end

# ```python
# Define the model
model = RandomForestRegressor(n_estimators=100, random_state=0, n_jobs=-1)
# ```end

# ```python
# Combine preprocessing and modeling steps into a pipeline
pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                           ('model', model)
                          ])
# ```end

# ```python
# Fit the pipeline to the training data
X_train = train_data.drop('target', axis=1)
y_train = train_data['target']
pipeline.fit(X_train, y_train)
# ```end

# ```python
# Predict on the training data and calculate metrics
y_train_pred = pipeline.predict(X_train)
Train_R_Squared = r2_score(y_train, y_train_pred)
Train_RMSE = np.sqrt(mean_squared_error(y_train, y_train_pred))

print(f"Train_R_Squared:{Train_R_Squared}")   
print(f"Train_RMSE:{Train_RMSE}") 
# ```end

# ```python
# Predict on the test data and calculate metrics
X_test = test_data.drop('target', axis=1)
y_test = test_data['target']
y_test_pred = pipeline.predict(X_test)
Test_R_Squared = r2_score(y_test, y_test_pred)
Test_RMSE = np.sqrt(mean_squared_error(y_test, y_test_pred))

print(f"Test_R_Squared:{Test_R_Squared}")   
print(f"Test_RMSE:{Test_RMSE}") 
# ```end