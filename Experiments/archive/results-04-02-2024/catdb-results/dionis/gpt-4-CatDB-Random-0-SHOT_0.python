# ```python
# Import all required packages
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score, mean_squared_error
# ```end

# ```python
# Load the datasets
train_data = pd.read_csv('../../../data/dionis/dionis_train.csv')
test_data = pd.read_csv('../../../data/dionis/dionis_test.csv')
# ```end

# ```python
# Drop the unnecessary columns
drop_cols = ['V33','V27','V54','V37','V35','V14']
train_data.drop(columns=drop_cols, inplace=True)
test_data.drop(columns=drop_cols, inplace=True)
# ```end

# ```python
# Define the columns to be scaled and encoded
scale_cols = ['V44','V17','V51','V12','V31','V47','V22','V40','V1','V24','V36','V52','V5','V9','V11','V3','V13','V32','V34','V41','V26','V6','V25','V42','V50','V2','V18','V21','V4','V10','V43','V56','V48','V57','V15','V29','V23','V49','V19','V16','V45','V8','V7','V58','V55','V59','V60','V20','V38','V28','V46','V30','V39','V53']
encode_cols = ['V3','V26','V6','V25','V21','V10','V49','V45','V60','V53']
# ```end

# ```python
# Define the preprocessing steps
preprocessor = ColumnTransformer(
    transformers=[
        ('num', MinMaxScaler(), scale_cols),
        ('cat', OneHotEncoder(), encode_cols)])
# ```end

# ```python
# Define the model
model = RandomForestRegressor(n_estimators=100, random_state=0, n_jobs=-1)
# ```end

# ```python
# Combine preprocessing and modeling steps into a pipeline
pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                           ('model', model)])
# ```end

# ```python
# Define the target variable
target = 'class'
X_train = train_data.drop(target, axis=1)
y_train = train_data[target]
X_test = test_data.drop(target, axis=1)
y_test = test_data[target]
# ```end

# ```python
# Train the model
pipeline.fit(X_train, y_train)
# ```end

# ```python
# Make predictions
train_preds = pipeline.predict(X_train)
test_preds = pipeline.predict(X_test)
# ```end

# ```python
# Calculate the model R-Squared and Root Mean Squared Error
Train_R_Squared = r2_score(y_train, train_preds)
Test_R_Squared = r2_score(y_test, test_preds)
Train_RMSE = np.sqrt(mean_squared_error(y_train, train_preds))
Test_RMSE = np.sqrt(mean_squared_error(y_test, test_preds))
# ```end

# ```python
# Report evaluation based on train and test dataset
print(f"Train_R_Squared:{Train_R_Squared}")   
print(f"Train_RMSE:{Train_RMSE}") 
print(f"Test_R_Squared:{Test_R_Squared}")   
print(f"Test_RMSE:{Test_RMSE}") 
# ```end