#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

source("scripts/pipelines/scripts/utils.dml") as utils;
source("scripts/builtin/bandit.dml") as bandit;

sep=$sep
trainData = read($trainData, data_type="frame", format="csv", header=TRUE,
  naStrings= ["NA", "null","  ","NaN", "_nan_", "", "?", " ", "nan", "inf", "NAN", "99999", "99999.00"], sep=sep);

testData = read($testData, data_type="frame", format="csv", header=TRUE,
 naStrings= ["NA", "null","  ","NaN", "_nan_", "", "?", " ", "nan", "inf", "NAN", "99999", "99999.00"], sep=sep);

metaInfo = read($metaData, data_type="frame", format="csv", header=FALSE);
pip = read($input+"/pip.csv", data_type="frame", format="csv", header=FALSE);
hp = read($input+"/hp.csv", data_type="matrix", format="csv", header=FALSE);
applyFunc = read($input+"/applyFunc.csv", data_type="frame", format="csv", header=FALSE);
evalHp = read($input+"/evalHp.csv", data_type="matrix", format="csv", header=FALSE);

cv = as.logical($logical)
func = $func
out = $out
metaInfo = metaInfo[, 2:ncol(metaInfo)]

[scores, cleanTrain, cleanTest, externalState, iState] = fit_pipeline(trainData=trainData, testData=testData, metaData=metaInfo, pip=pip[1,], applyFunc=applyFunc[1, ], hp=hp[1,], evaluationFunc=func, evalFunHp=evalHp, isLastLabel=TRUE, correctTypos=FALSE)

cleanTrain = replace(target=cleanTrain, pattern = NaN, replacement = 0)
cleanTest = replace(target=cleanTest, pattern = NaN, replacement = 0)


write(cleanTrain, out+"/"+$dsName+"_train.csv", format="csv", header=TRUE)
write(cleanTest, out+"/"+$dsName+"_test.csv", format="csv", header=TRUE)

# UDF for evaluation
evalClassification = function(Matrix[Double] X, Matrix[Double] Y, Matrix[Double] Xtest, Matrix[Double] Ytest, Matrix[Double] Xorig=as.matrix(0),
  Matrix[Double] evalFunHp)
  
return(Matrix[Double] output)
{

  if(min(Y) == max(Y))
  {
    accuracy = as.matrix(0)
    a = 0
  }
  else {
    beta = multiLogReg(X=X, Y=Y, icpt=as.scalar(evalFunHp[1,1]), reg=as.scalar(evalFunHp[1,2]), tol=as.scalar(evalFunHp[1,3]), 
      maxi=1000, maxii=0, verbose=FALSE);
    [prob, yhat, accuracy] = multiLogRegPredict(Xtest, beta, Ytest, FALSE)
    error = yhat != Ytest
    a = getAccuracy(Ytest, yhat, TRUE)
    accuracy = as.matrix(accuracy)
    print("accuracy: "+toString(accuracy))
  }
  output = cbind(accuracy, evalFunHp)
}


# UDF for evaluation
# choice of parameters provided by API, X, Y, clone_X, evalFunHp (hyper-param), trainML (boolean for optimizing hp internally or passed by externally )
evalRegression = function(Matrix[Double] X, Matrix[Double] Y, Matrix[Double] Xtest, Matrix[Double] Ytest, Matrix[Double] Xorig=as.matrix(0),
  Matrix[Double] evalFunHp)
return(Matrix[Double] output)
{
  if(is.na(as.scalar(evalFunHp[1,1])))
  {
    # do the gridsearch for hyper-parameters
    lArgs=list(X=X, y=Y, icpt=0, reg=-1, tol=-1, maxi=-1, verbose=FALSE);
    params = list("icpt","reg", "tol");
    paramRanges = list(seq(0,2,1), 10^seq(0,-4), 10^seq(-6,-12));
    [B1, opt] = gridSearch(X=X, y=Y, train="lm", predict="wmape", trainArgs=lArgs,
      numB=ncol(X)+1, params=params, paramValues=paramRanges, cv=TRUE, cvk=3, verbose=FALSE);
    evalFunHp = as.matrix(opt)
  }
  beta = lm(X=X, y=Y, icpt=as.scalar(evalFunHp[1,1]), reg=as.scalar(evalFunHp[1,2]), tol=as.scalar(evalFunHp[1,3]),
    maxi=1000, verbose=FALSE);

  acc = wmape(Xtest, Ytest, beta)
  accuracy = (1 - acc)
  output = cbind(accuracy, evalFunHp)
}

wmape = function(Matrix[Double] X, Matrix[Double] y, Matrix[Double] B) return (Matrix[Double] loss) {
  # loss = as.matrix(sum((y - X%*%B)^2));
  pred = lmPredict(X=X, B=B, ytest=y, verbose=FALSE);
  # print("WMAPO: "+(1 - (sum(abs((pred - y)/(pred + y)))/nrow(y))))
  WMAPE = 1 - (sum(abs((pred - y)/(pred + y)))/nrow(y)) #this will give the lose into range of [0,1]
  loss = ifelse(is.na(as.matrix(WMAPE)), as.matrix(0), as.matrix(WMAPE))
}