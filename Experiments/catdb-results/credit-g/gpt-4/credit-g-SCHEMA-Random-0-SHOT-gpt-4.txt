SYSTEM MESSAGE: 
 You will be given a dataset, a Schema of the dataset, and a question. Your task is to generate a data science pipeline. You should answer only by generating code. You should follow Steps 1 to 12 to answer the question. You should return a data science pipeline in Python 3.10 programming language. If you do not have a relevant answer to the question, simply write: "Insufficient information."

Step 1: Load the raining and test datasets. For the training data, utilize the variable """train_data=data/credit-g/credit-g_train.csv""", and for the test data, employ the variable """test_data=data/credit-g/credit-g_test.csv""". Utilize pandas' CSV readers to load the datasets.

Step 2: Don't split the train_data into train and test sets. Use only the given datasets.

Step 3: The user will provide the Schema of the dataset with columns appropriately named as attributes, enclosed in triple quotes, and preceded by the prefix "Schema:".

Step 4: This pipeline generates additional columns that are useful for a downstream binary classification algorithm predicting "class".Additional columns add new semantic information, that is they use real world knowledge on the dataset mentioned in """Schema:""". They can e.g. be feature combinations, transformations, aggregations where the new column is a function of the existing columns. The scale of columns and offset does not matter. Make sure all used columns exist. Follow the above description of columns closely and consider the datatypes and meanings of classes. This code also drops columns, if these may be redundant and hurt the predictive performance of the downstream classifier (Feature selection). Dropping columns may help as the chance of overfitting is lower, especially if the dataset is small. The classifier will be trained on the dataset with the generated columns and evaluated on a holdout set.

Step 5: Remove low ration, static, and unique columns by getting statistic values.

Step 6: Code formatting for all required packages:
```python
# Import all required packages
```end


Step 7: Code formatting for each added column:
 ```python 
 # (Feature name and description) 
 # Usefulness: (Description why this adds useful real world knowledge to classify 'class' according to dataset description and attributes.) 
 (Some pandas code using 'residence_since', 'age', ... to add a new column for each row in df)
 ```end

Step 8: Utilize the 1-folds binary classification technique for constructing the model.

Step 9: Code formatting for dropping columns:
```python-dropping-columns
# Explanation why the column XX is dropped
# df.drop(columns=['XX'], inplace=True)
```end-dropping-columns


Step 10: Code formatting for training technique:
 ```python 
 # Use a {} technique
 # Explanation why the solution is selected 
 trn = ... 
 ```end

Step 11: Code formatting for binary classification evaluation:
```python
# Report evaluation based on only test dataset
# Calculate the model accuracy, represented by a value between 0 and 1, where 0 indicates low accuracy and 1 signifies higher accuracy. Store the accuracy value in a variable labeled as "Accuracy=...".
# Calculate the model f1 score, represented by a value between 0 and 1, where 0 indicates low accuracy and 1 signifies higher accuracy. Store the f1 score value in a variable labeled as "F1_score=...".
# Print the accuracy result: print(f"Accuracy:{Accuracy}")   
# Print the f1 score result: print(f"F1_score:{F1_score}") 
```end


Step 12: Don't report validation evaluation. We don't need it.

 
----------------------------------------------------------------------------
PROMPT TEXT:
Schema:
"""
residence_since (int)
age (int)
installment_commitment (int)
credit_amount (int)
duration (int)
num_dependents (int)
existing_credits (int)
other_payment_plans (str)
foreign_worker (str)
property_magnitude (str)
personal_status (str)
credit_history (str)
employment (str)
purpose (str)
own_telephone (str)
other_parties (str)
housing (str)
savings_status (str)
job (str)
checking_status (str)
class (str)
"""

Dataset Attribute:
Number of samples (rows) in training dataset: 700

Question: Provide a complete pipeline code that can be executed in a multi-threaded environment with various CPU configurations, such as PyTorch or other relevant frameworks.
Each codeblock ends with "```end" and starts with "```python".
