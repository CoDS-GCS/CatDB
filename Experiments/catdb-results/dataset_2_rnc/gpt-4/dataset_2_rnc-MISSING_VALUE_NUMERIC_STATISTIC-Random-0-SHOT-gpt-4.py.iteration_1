# ```python
# Import all required packages
import pandas as pd
from sklearn.model_selection import cross_val_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, f1_score
from sklearn.preprocessing import LabelEncoder
# ```end

# ```python
# Load the training and test datasets
train_data = pd.read_csv('data/dataset_2_rnc/dataset_2_rnc_train.csv')
test_data = pd.read_csv('data/dataset_2_rnc/dataset_2_rnc_test.csv')
# ```end

# ```python
# Fill missing values in the dataset
train_data.fillna(train_data.median(), inplace=True)
test_data.fillna(test_data.median(), inplace=True)
# ```end

# ```python
# Feature: c_8_c_11_ratio
# Usefulness: This feature represents the ratio between c_8 and c_11, which might be useful for the classification of 'c_21'.
train_data['c_8_c_11_ratio'] = train_data['c_8'] / train_data['c_11']
test_data['c_8_c_11_ratio'] = test_data['c_8'] / test_data['c_11']
# ```end

# ```python
# Explanation why the column c_14 is dropped
# The column c_14 has a high frequency of missing values (0.82%), which might hurt the performance of the classifier.
train_data.drop(columns=['c_14'], inplace=True)
test_data.drop(columns=['c_14'], inplace=True)
# ```end-dropping-columns

# ```python
# Explanation why the column c_10 is dropped
# The column c_10 has a high frequency of missing values (0.90%), which might hurt the performance of the classifier.
train_data.drop(columns=['c_10'], inplace=True)
test_data.drop(columns=['c_10'], inplace=True)
# ```end-dropping-columns

# ```python
# Explanation why the column c_19 is dropped
# The column c_19 has a high frequency of missing values (0.58%), which might hurt the performance of the classifier.
train_data.drop(columns=['c_19'], inplace=True)
test_data.drop(columns=['c_19'], inplace=True)
# ```end-dropping-columns

# ```python
# Use a LabelEncoder technique
# Explanation why the solution is selected: The LabelEncoder technique is selected because it can transform non-numerical labels to numerical labels, which is required for the RandomForestClassifier.
le = LabelEncoder()
for column in train_data.columns:
    if train_data[column].dtype == 'object':
        train_data[column] = le.fit_transform(train_data[column].astype(str))
for column in test_data.columns:
    if test_data[column].dtype == 'object':
        test_data[column] = le.transform(test_data[column].astype(str))
# ```end

# ```python
# Use a RandomForestClassifier technique
# Explanation why the solution is selected: The RandomForestClassifier is selected because it is a robust and versatile classifier that can handle both numerical and categorical features.
clf = RandomForestClassifier(n_estimators=100, random_state=0, n_jobs=-1)
clf.fit(train_data.drop('c_21', axis=1), train_data['c_21'])
# ```end

# ```python
# Report evaluation based on only test dataset
predictions = clf.predict(test_data.drop('c_21', axis=1))
Accuracy = accuracy_score(test_data['c_21'], predictions)
F1_score = f1_score(test_data['c_21'], predictions, average='weighted')
print(f"Accuracy:{Accuracy}")
print(f"F1_score:{F1_score}")
# ```end